{
  // main() is just to build and test
  func main() {
    if len(os.Args) != 2 {
      log.Fatal("Usage: go_parser 'EXPR'")
      return
    }
    got, err := ParseReader("", strings.NewReader(os.Args[1]))
    if err != nil {
      log.Fatal(err)
    }
      fmt.Println("=", got)
  }
}

SourceFile        "source file organization"    = PackageClause EOF

// # 'package' clause ======================

PackageClause     "'package' clause"            = PACKAGE PackageName
PackageName       "package name"                = identifier

// # 'import' declarations =================

ImportDecl        "'import' declaration"        = IMPORT ( ImportSpec / LPAREN ( ImportSpec BD )* RPAREN )
ImportSpec        "import specification"        = ( DOT / PackageName )? ImportPath
ImportPath        "import path"                 = string_lit

// # Characters =============================

newline           "line feed"                   = LF
unicode_char      "unicode char"                = &[\pL] !newline
unicode_letter    "unicode letter"              = [\pL]
unicode_digit     "unicode digit"               = [\pNd]

// # Letters    =============================

letter            "letter"                      = unicode_letter / UBAR
decimal_digit     "decimal digit"               = [0-9]
binary_digit      "binary digit"                = "0" / "1"
octal_digit       "octal digit"                 = [0-7]
hex_digit         "hexadecimal digit"           = [0-9] / [A-F]i / [a-f]i

letter_digit      "letter or diigit"            = letter ( letter / decimal_digit )+

// # Identifiers ============================

identifier        "identifier"                  = !Keyword letter_digit

// # Integer literals =======================

int_lit           "integer literal"             = decimal_lit
                                                / binary_lit
                                                / octal_lit
                                                / hex_lit

decimal_lit       "decimal literal"             = "0" / ( [1-9] ) ( ( UBAR )? decimal_digits )?
binary_lit        "binary literal"              = "0" ( "b" / "B" ) ( UBAR )? binary_digits
octal_lit         "octal literal"               = "0" ( "o" / "O" ) ( UBAR )? octal_digits
hex_lit           "hexadecimal literal"         = "0" ( "x" / "X" ) ( UBAR )? hex_digits

decimal_digits    "decimal digits"              = decimal_digit ( ( UBAR )? decimal_digit )*
binary_digits     "binary digits"               = binary_digit ( ( UBAR )? binary_digit )*
octal_digits      "octal digits"                = octal_digit ( ( UBAR )? octal_digit )*
hex_digits        "hexadecimal digits"          = hex_digit ( ( UBAR ) hex_digit )*

// # Floating-point literals ================

float_lit         "float literal"               = decimal_float_lit
                                                / hex_float_lit

decimal_float_lit "decimal float literal"       = decimal_digits DOT ( decimal_digits )? ( decimal_exponent )?
                                                / decimal_digits decimal_exponent
                                                / DOT decimal_digits ( decimal_exponent )?

decimal_exponent  "decimal exponent"            = ( "e" / "E" ) ( PLUS / MINUS )? decimal_digits

hex_float_lit     "hexadecimal float literal"   = "0" ( "x" / "X" ) hex_mantissa hex_exponent
hex_mantissa      "hexadecimal mantissa"        = ( UBAR )? hex_digits DOT ( hex_digits )?
                                                / ( UBAR )? hex_digits
                                                / DOT hex_digits

hex_exponent      "hexadecimal exponent"        = ( "p" / "P" ) ( PLUS / MINUS )? decimal_digits

// # Imaginary literals =====================

imaginary_lit    "imaginary literal"            = (decimal_digits / int_lit / float_lit) "i"

// # Rune literals ==========================

rune_lit         "rune literal"                 = SQUO ( unicode_value / byte_value ) SQUO
unicode_value    "unicode value"                = unicode_char
                                                / little_u_value
                                                / big_u_value
                                                / escaped_char

byte_value       "byte value"                   = octal_byte_value
                                                / hex_byte_value

octal_byte_value "octal byte value"             = BQUO octal_digit octal_digit octal_digit
hex_byte_value   "hexadecimal byte value"       = BQUO "x"  hex_digit hex_digit
little_u_value   "little u value"               = BQUO "u"  hex_digit hex_digit hex_digit hex_digit
big_u_value      "big U value"                  = BQUO "U"  hex_digit hex_digit hex_digit hex_digit
                                                            hex_digit hex_digit hex_digit hex_digit

escaped_char     "rune escaped char"            = BSLASH ( "a" / "b" / "f" / "n" / "r" / "t" / "v" / BSLASH / SQUO / DQUO )

// # String literals ========================

string_lit             "string literal"             = raw_string_lit
                                                    / interpreted_string_lit

raw_string_lit         "raw string literal"         = BQUO ( unicode_char / newline )* BQUO
interpreted_string_lit "interpreted string literal" = DQUO ( unicode_value / byte_value )* DQUO

// # primitive signs -----------------------

SEMICOLON         "semicolon"                   = ';'
COLON             "colon"                       = ':'
DOT               "dot"                         = '.'

LPAREN            "left parenthesis"            = '('
LBRACK            "left bracket"                = '['
LBRACE            "left brace"                  = '{'
COMMA             "comma"                       = ','
PERIOD            "period"                      = '.'

RPAREN            "right parenthesis"           = ')'
RBRACK            "right bracket"               = ']'
RBRACE            "right brace"                 = '}'

PLUS              "plus"                        = '+'
MINUS             "minus"                       = '-'

SLASH             "slash"                       = '/'
BSLASH            "backslash"                   = [\\]

EQUAL             "equal"                       = '='
LSS               "less than"                   = '<'
GTR               "greater than"                = '>'

AMPER             "ampersand"                   = '&'
BANG              "bang"                        = '!'
// QUESTION          "question"                    = '?'
HAT               "hat"                         = '^'
PERCENT           "percent"                     = '%'
BAR               "bar"                         = '|'
UBAR              "underbar"                    = '_'

DQUO              "double quote"                = ["]
SQUO              "single quote"                = [']
BQUO              "back quote/grave accent"     = [`]

LF                "line feed"                   = [\n]
CR                "carriage return"             = [\r]
TAB               "horizontal tab"              = [\t]
SPC               "space"                       = [ ]

// AT                "atmark"                      = '@'
// NUM               "number"                      = '#'
// TILDA             "tilda"                       = '~'

// # operators/delimiters ------------------

NOT               "not"                         = BANG            // '!'

ADD               "add"                         = PLUS            // '+'
SUB               "subtract"                    = MINUS           // '-'
MUL               "multiply"                    = ASTERISK        // '*'
QUO               "quotient"                    = SLASH           // '/'
REM               "remainder"                   = PERCENT         // '%'

AND               "bit: AND"                    = AMPER           // '&'
OR                "bit: OR"                     = BAR             // '|'
XOR               "bit: XOR"                    = HAT             // '^'
AND_NOT           "bit: AND NOT"                = AMPER HAT       // "&^"

NEG               "unary bit negation"          = HAT             // '^'

SHL               "bit: shift left"             = LSS LSS         // "<<"
SHR               "bit: shift right"            = GTR GTR         // ">>"

LAND              "logical AND"                 = AMPER AMPER     // "&&"
LOR               "logical OR"                  = BAR BAR         // "||"
ARROW             "arrow"                       = LSS MINUS       // "<-"
INC               "increment"                   = PLUS PLUS       // "++"
DEC               "decrement"                   = MINUS MINUS     // "--"

EQL               "equal"                       = EQUAL EQUAL     // "=="
NEQ               "not equal"                   = BANG EQUAL      // "!="
LEQ               "less or equal"               = LSS EQUAL       // "<="
GEQ               "greater or equal"            = GTR EQUAL       // ">="
DEFINE            "define"                      = COLON EQUAL     // ":="
ELLIPSIS          "ellipsis"                    = DOT DOT DOT     // "..."

ASSIGN            "assign"                      = EQUAL           // '='
ADD_ASSIGN        "assign: add"                 = PLUS EQUAL      // "+="
SUB_ASSIGN        "assign: subtract"            = MINUS EQUAL     // "-="
MUL_ASSIGN        "assign: multiply"            = ASTERISK EQUAL  // "*="
QUO_ASSIGN        "assign: quotient"            = SLASH EQUAL     // "/="
REM_ASSIGN        "assign: remainder"           = PERCENT EQUAL   // "%="

AND_ASSIGN        "assign: logical AND"         = AMPER EQUAL     // "&="
OR_ASSIGN         "assign: logical OR"          = BAR EQUAL       // "|="
XOR_ASSIGN        "assign: logical XOR"         = HAT EQUAL       // "^="
AND_NOT_ASSIGN    "assign: logical AND NOT"     = AMPER HAT EQUAL // "&^="

SHL_ASSIGN        "assign: shift left"          = LSS LSS EQUAL   // "<<="
SHR_ASSIGN        "assign: shift right"         = GTR GTR EQUAL   // ">>="

ADDR              "address"                     = AMPER           // '&'
REFR              "resolve reference"           = ASTERISK        // '*'

CMST              "comment start"               = SLASH ASTERISK  // "/*"
CMED              "comment end"                 = ASTERISK SLASH  // "*/"
CMLN              "comment line"                = SLASH SLASH     // "//"

LFCR              "linefeed, carriage return"   = LF
                                                / CR

COMMENT_MULTI     "multiline-comment"           = CMST ( !CMED . )* CMED
COMMENT_LINE      "end-of-line comment"         = CMLN ( !LFCR . )* LFCR

WHITESPACE        "white space"                 = (
                                                  SPC
                                                / LFCR
                                                / TAB
                                                )+

BD                "boundary"                    = WHITESPACE
                                                / SEMICOLON
                                                / COMMENT_MULTI
                                                / COMMENT_LINE

EOF               "end-of-file"                 = !.

// # Keywords ===============================
// via https://github.com/golang/go/src/go/token/token.go

BREAK                                           = "break"       !letter_digit SPC+
CASE                                            = "case"        !letter_digit SPC+
CHAN                                            = "chan"        !letter_digit SPC+
CONST                                           = "const"       !letter_digit SPC+
CONTINUE                                        = "continue"    !letter_digit SPC+

DEFAULT                                         = "default"     !letter_digit SPC+
DEFER                                           = "defer"       !letter_digit SPC+
ELSE                                            = "else"        !letter_digit SPC+
FALLTHROUGH                                     = "fallthrough" !letter_digit SPC+
FOR                                             = "for"         !letter_digit SPC+

FUNC                                            = "func"        !letter_digit SPC+
GO                                              = "go"          !letter_digit SPC+
GOTO                                            = "goto"        !letter_digit SPC+
IF                                              = "if"          !letter_digit SPC+
IMPORT                                          = "import"      !letter_digit SPC+

INTERFACE                                       = "interface"   !letter_digit SPC+
MAP                                             = "map"         !letter_digit SPC+
PACKAGE                                         = "package"     !letter_digit SPC+
RANGE                                           = "range"       !letter_digit SPC+
RETURN                                          = "return"      !letter_digit SPC+

SELECT                                          = "select"      !letter_digit SPC+
STRUCT                                          = "struct"      !letter_digit SPC+
SWITCH                                          = "switch"      !letter_digit SPC+
TYPE                                            = "type"        !letter_digit SPC+
VAR                                             = "var"         !letter_digit SPC+

Keyword           "keyword"                     = (
                                                  "break"
                                                / "case"
                                                / "chan"
                                                / "const"
                                                / "continue"

                                                / "default"
                                                / "defer"
                                                / "else"
                                                / "fallthrough"
                                                / "for"

                                                / "func"
                                                / "go"
                                                / "goto"
                                                / "if"
                                                / "import"

                                                / "interface"
                                                / "map"
                                                / "package"
                                                / "range"
                                                / "return"

                                                / "select"
                                                / "struct"
                                                / "switch"
                                                / "type"
                                                / "var"
                                                ) !letter_digit
