// Code generated by pigeon; DO NOT EDIT.

package go_parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"
)

var g = &grammar{
	rules: []*rule{
		{
			name:        "newline",
			displayName: "\"line feed\"",
			pos:         position{line: 10, col: 1, offset: 158},
			expr: &ruleRefExpr{
				pos:  position{line: 10, col: 51, offset: 208},
				name: "LF",
			},
		},
		{
			name:        "unicode_char",
			displayName: "\"unicode char\"",
			pos:         position{line: 11, col: 1, offset: 211},
			expr: &seqExpr{
				pos: position{line: 11, col: 51, offset: 261},
				exprs: []interface{}{
					&andExpr{
						pos: position{line: 11, col: 51, offset: 261},
						expr: &charClassMatcher{
							pos:        position{line: 11, col: 52, offset: 262},
							val:        "[\\pL]",
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&notExpr{
						pos: position{line: 11, col: 58, offset: 268},
						expr: &ruleRefExpr{
							pos:  position{line: 11, col: 59, offset: 269},
							name: "newline",
						},
					},
				},
			},
		},
		{
			name:        "unicode_letter",
			displayName: "\"unicode letter\"",
			pos:         position{line: 12, col: 1, offset: 277},
			expr: &charClassMatcher{
				pos:        position{line: 12, col: 51, offset: 327},
				val:        "[\\pL]",
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "unicode_digit",
			displayName: "\"unicode digit\"",
			pos:         position{line: 13, col: 1, offset: 333},
			expr: &charClassMatcher{
				pos:        position{line: 13, col: 51, offset: 383},
				val:        "[\\pNd]",
				chars:      []rune{'d'},
				classes:    []*unicode.RangeTable{rangeTable("N")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "letter",
			displayName: "\"letter\"",
			pos:         position{line: 17, col: 1, offset: 438},
			expr: &choiceExpr{
				pos: position{line: 17, col: 51, offset: 488},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 17, col: 51, offset: 488},
						name: "unicode_letter",
					},
					&ruleRefExpr{
						pos:  position{line: 17, col: 68, offset: 505},
						name: "UBAR",
					},
				},
			},
		},
		{
			name:        "decimal_digit",
			displayName: "\"decimal digit\"",
			pos:         position{line: 18, col: 1, offset: 510},
			expr: &charClassMatcher{
				pos:        position{line: 18, col: 51, offset: 560},
				val:        "[0-9]",
				ranges:     []rune{'0', '9'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "binary_digit",
			displayName: "\"binary digit\"",
			pos:         position{line: 19, col: 1, offset: 566},
			expr: &choiceExpr{
				pos: position{line: 19, col: 51, offset: 616},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 19, col: 51, offset: 616},
						val:        "0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 19, col: 57, offset: 622},
						val:        "1",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name:        "octal_digit",
			displayName: "\"octal digit\"",
			pos:         position{line: 20, col: 1, offset: 626},
			expr: &charClassMatcher{
				pos:        position{line: 20, col: 51, offset: 676},
				val:        "[0-7]",
				ranges:     []rune{'0', '7'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "hex_digit",
			displayName: "\"hexadecimal digit\"",
			pos:         position{line: 21, col: 1, offset: 682},
			expr: &choiceExpr{
				pos: position{line: 21, col: 51, offset: 732},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 21, col: 51, offset: 732},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 21, col: 59, offset: 740},
						val:        "[A-F]i",
						ranges:     []rune{'a', 'f'},
						ignoreCase: true,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 21, col: 68, offset: 749},
						val:        "[a-f]i",
						ranges:     []rune{'a', 'f'},
						ignoreCase: true,
						inverted:   false,
					},
				},
			},
		},
		{
			name:        "identifier",
			displayName: "\"identifier\"",
			pos:         position{line: 25, col: 1, offset: 804},
			expr: &seqExpr{
				pos: position{line: 25, col: 51, offset: 854},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 25, col: 51, offset: 854},
						name: "letter",
					},
					&zeroOrMoreExpr{
						pos: position{line: 25, col: 58, offset: 861},
						expr: &choiceExpr{
							pos: position{line: 25, col: 60, offset: 863},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 25, col: 60, offset: 863},
									name: "letter",
								},
								&ruleRefExpr{
									pos:  position{line: 25, col: 69, offset: 872},
									name: "unicode_digit",
								},
							},
						},
					},
				},
			},
		},
		{
			name:        "int_lit",
			displayName: "\"integer literal\"",
			pos:         position{line: 29, col: 1, offset: 937},
			expr: &choiceExpr{
				pos: position{line: 29, col: 51, offset: 987},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 29, col: 51, offset: 987},
						name: "decimal_lit",
					},
					&ruleRefExpr{
						pos:  position{line: 30, col: 51, offset: 1049},
						name: "binary_lit",
					},
					&ruleRefExpr{
						pos:  position{line: 31, col: 51, offset: 1110},
						name: "octal_lit",
					},
					&ruleRefExpr{
						pos:  position{line: 32, col: 51, offset: 1170},
						name: "hex_lit",
					},
				},
			},
		},
		{
			name:        "decimal_lit",
			displayName: "\"decimal literal\"",
			pos:         position{line: 34, col: 1, offset: 1179},
			expr: &choiceExpr{
				pos: position{line: 34, col: 51, offset: 1229},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 34, col: 51, offset: 1229},
						val:        "0",
						ignoreCase: false,
					},
					&seqExpr{
						pos: position{line: 34, col: 57, offset: 1235},
						exprs: []interface{}{
							&charClassMatcher{
								pos:        position{line: 34, col: 59, offset: 1237},
								val:        "[1-9]",
								ranges:     []rune{'1', '9'},
								ignoreCase: false,
								inverted:   false,
							},
							&zeroOrOneExpr{
								pos: position{line: 34, col: 67, offset: 1245},
								expr: &seqExpr{
									pos: position{line: 34, col: 69, offset: 1247},
									exprs: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 34, col: 69, offset: 1247},
											expr: &ruleRefExpr{
												pos:  position{line: 34, col: 71, offset: 1249},
												name: "UBAR",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 34, col: 79, offset: 1257},
											name: "decimal_digits",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name:        "binary_lit",
			displayName: "\"binary literal\"",
			pos:         position{line: 35, col: 1, offset: 1275},
			expr: &seqExpr{
				pos: position{line: 35, col: 51, offset: 1325},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 35, col: 51, offset: 1325},
						val:        "0",
						ignoreCase: false,
					},
					&choiceExpr{
						pos: position{line: 35, col: 57, offset: 1331},
						alternatives: []interface{}{
							&litMatcher{
								pos:        position{line: 35, col: 57, offset: 1331},
								val:        "b",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 35, col: 63, offset: 1337},
								val:        "B",
								ignoreCase: false,
							},
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 35, col: 69, offset: 1343},
						expr: &ruleRefExpr{
							pos:  position{line: 35, col: 71, offset: 1345},
							name: "UBAR",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 35, col: 79, offset: 1353},
						name: "binary_digits",
					},
				},
			},
		},
		{
			name:        "octal_lit",
			displayName: "\"octal literal\"",
			pos:         position{line: 36, col: 1, offset: 1367},
			expr: &seqExpr{
				pos: position{line: 36, col: 51, offset: 1417},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 36, col: 51, offset: 1417},
						val:        "0",
						ignoreCase: false,
					},
					&choiceExpr{
						pos: position{line: 36, col: 57, offset: 1423},
						alternatives: []interface{}{
							&litMatcher{
								pos:        position{line: 36, col: 57, offset: 1423},
								val:        "o",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 36, col: 63, offset: 1429},
								val:        "O",
								ignoreCase: false,
							},
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 36, col: 69, offset: 1435},
						expr: &ruleRefExpr{
							pos:  position{line: 36, col: 71, offset: 1437},
							name: "UBAR",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 36, col: 79, offset: 1445},
						name: "octal_digits",
					},
				},
			},
		},
		{
			name:        "hex_lit",
			displayName: "\"hexadecimal literal\"",
			pos:         position{line: 37, col: 1, offset: 1458},
			expr: &seqExpr{
				pos: position{line: 37, col: 51, offset: 1508},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 37, col: 51, offset: 1508},
						val:        "0",
						ignoreCase: false,
					},
					&choiceExpr{
						pos: position{line: 37, col: 57, offset: 1514},
						alternatives: []interface{}{
							&litMatcher{
								pos:        position{line: 37, col: 57, offset: 1514},
								val:        "x",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 37, col: 63, offset: 1520},
								val:        "X",
								ignoreCase: false,
							},
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 37, col: 69, offset: 1526},
						expr: &ruleRefExpr{
							pos:  position{line: 37, col: 71, offset: 1528},
							name: "UBAR",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 37, col: 79, offset: 1536},
						name: "hex_digits",
					},
				},
			},
		},
		{
			name:        "decimal_digits",
			displayName: "\"decimal digits\"",
			pos:         position{line: 39, col: 1, offset: 1548},
			expr: &seqExpr{
				pos: position{line: 39, col: 51, offset: 1598},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 39, col: 51, offset: 1598},
						name: "decimal_digit",
					},
					&zeroOrMoreExpr{
						pos: position{line: 39, col: 65, offset: 1612},
						expr: &seqExpr{
							pos: position{line: 39, col: 67, offset: 1614},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 39, col: 67, offset: 1614},
									expr: &ruleRefExpr{
										pos:  position{line: 39, col: 69, offset: 1616},
										name: "UBAR",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 39, col: 77, offset: 1624},
									name: "decimal_digit",
								},
							},
						},
					},
				},
			},
		},
		{
			name:        "binary_digits",
			displayName: "\"binary digits\"",
			pos:         position{line: 40, col: 1, offset: 1641},
			expr: &seqExpr{
				pos: position{line: 40, col: 51, offset: 1691},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 40, col: 51, offset: 1691},
						name: "binary_digit",
					},
					&zeroOrMoreExpr{
						pos: position{line: 40, col: 64, offset: 1704},
						expr: &seqExpr{
							pos: position{line: 40, col: 66, offset: 1706},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 40, col: 66, offset: 1706},
									expr: &ruleRefExpr{
										pos:  position{line: 40, col: 68, offset: 1708},
										name: "UBAR",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 40, col: 76, offset: 1716},
									name: "binary_digit",
								},
							},
						},
					},
				},
			},
		},
		{
			name:        "octal_digits",
			displayName: "\"octal digits\"",
			pos:         position{line: 41, col: 1, offset: 1732},
			expr: &seqExpr{
				pos: position{line: 41, col: 51, offset: 1782},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 41, col: 51, offset: 1782},
						name: "octal_digit",
					},
					&zeroOrMoreExpr{
						pos: position{line: 41, col: 63, offset: 1794},
						expr: &seqExpr{
							pos: position{line: 41, col: 65, offset: 1796},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 41, col: 65, offset: 1796},
									expr: &ruleRefExpr{
										pos:  position{line: 41, col: 67, offset: 1798},
										name: "UBAR",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 41, col: 75, offset: 1806},
									name: "octal_digit",
								},
							},
						},
					},
				},
			},
		},
		{
			name:        "hex_digits",
			displayName: "\"hexadecimal digits\"",
			pos:         position{line: 42, col: 1, offset: 1821},
			expr: &seqExpr{
				pos: position{line: 42, col: 51, offset: 1871},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 42, col: 51, offset: 1871},
						name: "hex_digit",
					},
					&zeroOrMoreExpr{
						pos: position{line: 42, col: 61, offset: 1881},
						expr: &seqExpr{
							pos: position{line: 42, col: 63, offset: 1883},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 42, col: 65, offset: 1885},
									name: "UBAR",
								},
								&ruleRefExpr{
									pos:  position{line: 42, col: 72, offset: 1892},
									name: "hex_digit",
								},
							},
						},
					},
				},
			},
		},
		{
			name:        "float_lit",
			displayName: "\"float literal\"",
			pos:         position{line: 46, col: 1, offset: 1953},
			expr: &choiceExpr{
				pos: position{line: 46, col: 51, offset: 2003},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 46, col: 51, offset: 2003},
						name: "decimal_float_lit",
					},
					&ruleRefExpr{
						pos:  position{line: 47, col: 51, offset: 2071},
						name: "hex_float_lit",
					},
				},
			},
		},
		{
			name:        "decimal_float_lit",
			displayName: "\"decimal float literal\"",
			pos:         position{line: 49, col: 1, offset: 2086},
			expr: &choiceExpr{
				pos: position{line: 49, col: 51, offset: 2136},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 49, col: 51, offset: 2136},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 49, col: 51, offset: 2136},
								name: "decimal_digits",
							},
							&ruleRefExpr{
								pos:  position{line: 49, col: 66, offset: 2151},
								name: "DOT",
							},
							&zeroOrOneExpr{
								pos: position{line: 49, col: 70, offset: 2155},
								expr: &ruleRefExpr{
									pos:  position{line: 49, col: 72, offset: 2157},
									name: "decimal_digits",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 49, col: 90, offset: 2175},
								expr: &ruleRefExpr{
									pos:  position{line: 49, col: 92, offset: 2177},
									name: "decimal_exponent",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 50, col: 51, offset: 2247},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 50, col: 51, offset: 2247},
								name: "decimal_digits",
							},
							&ruleRefExpr{
								pos:  position{line: 50, col: 66, offset: 2262},
								name: "decimal_exponent",
							},
						},
					},
					&seqExpr{
						pos: position{line: 51, col: 51, offset: 2329},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 51, col: 51, offset: 2329},
								name: "DOT",
							},
							&ruleRefExpr{
								pos:  position{line: 51, col: 55, offset: 2333},
								name: "decimal_digits",
							},
							&zeroOrOneExpr{
								pos: position{line: 51, col: 70, offset: 2348},
								expr: &ruleRefExpr{
									pos:  position{line: 51, col: 72, offset: 2350},
									name: "decimal_exponent",
								},
							},
						},
					},
				},
			},
		},
		{
			name:        "decimal_exponent",
			displayName: "\"decimal exponent\"",
			pos:         position{line: 53, col: 1, offset: 2371},
			expr: &seqExpr{
				pos: position{line: 53, col: 51, offset: 2421},
				exprs: []interface{}{
					&choiceExpr{
						pos: position{line: 53, col: 53, offset: 2423},
						alternatives: []interface{}{
							&litMatcher{
								pos:        position{line: 53, col: 53, offset: 2423},
								val:        "e",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 53, col: 59, offset: 2429},
								val:        "E",
								ignoreCase: false,
							},
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 53, col: 65, offset: 2435},
						expr: &choiceExpr{
							pos: position{line: 53, col: 67, offset: 2437},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 53, col: 67, offset: 2437},
									name: "PLUS",
								},
								&ruleRefExpr{
									pos:  position{line: 53, col: 74, offset: 2444},
									name: "MINUS",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 53, col: 83, offset: 2453},
						name: "decimal_digits",
					},
				},
			},
		},
		{
			name:        "hex_float_lit",
			displayName: "\"hexadecimal float literal\"",
			pos:         position{line: 55, col: 1, offset: 2469},
			expr: &seqExpr{
				pos: position{line: 55, col: 51, offset: 2519},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 55, col: 51, offset: 2519},
						val:        "0",
						ignoreCase: false,
					},
					&choiceExpr{
						pos: position{line: 55, col: 57, offset: 2525},
						alternatives: []interface{}{
							&litMatcher{
								pos:        position{line: 55, col: 57, offset: 2525},
								val:        "x",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 55, col: 63, offset: 2531},
								val:        "X",
								ignoreCase: false,
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 55, col: 69, offset: 2537},
						name: "hex_mantissa",
					},
					&ruleRefExpr{
						pos:  position{line: 55, col: 82, offset: 2550},
						name: "hex_exponent",
					},
				},
			},
		},
		{
			name:        "hex_mantissa",
			displayName: "\"hexadecimal mantissa\"",
			pos:         position{line: 56, col: 1, offset: 2563},
			expr: &choiceExpr{
				pos: position{line: 56, col: 51, offset: 2613},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 56, col: 51, offset: 2613},
						exprs: []interface{}{
							&zeroOrOneExpr{
								pos: position{line: 56, col: 51, offset: 2613},
								expr: &ruleRefExpr{
									pos:  position{line: 56, col: 53, offset: 2615},
									name: "UBAR",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 56, col: 61, offset: 2623},
								name: "hex_digits",
							},
							&ruleRefExpr{
								pos:  position{line: 56, col: 72, offset: 2634},
								name: "DOT",
							},
							&zeroOrOneExpr{
								pos: position{line: 56, col: 76, offset: 2638},
								expr: &ruleRefExpr{
									pos:  position{line: 56, col: 78, offset: 2640},
									name: "hex_digits",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 57, col: 51, offset: 2704},
						exprs: []interface{}{
							&zeroOrOneExpr{
								pos: position{line: 57, col: 51, offset: 2704},
								expr: &ruleRefExpr{
									pos:  position{line: 57, col: 53, offset: 2706},
									name: "UBAR",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 57, col: 61, offset: 2714},
								name: "hex_digits",
							},
						},
					},
					&seqExpr{
						pos: position{line: 58, col: 51, offset: 2775},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 58, col: 51, offset: 2775},
								name: "DOT",
							},
							&ruleRefExpr{
								pos:  position{line: 58, col: 55, offset: 2779},
								name: "hex_digits",
							},
						},
					},
				},
			},
		},
		{
			name:        "hex_exponent",
			displayName: "\"hexadecimal exponent\"",
			pos:         position{line: 60, col: 1, offset: 2791},
			expr: &seqExpr{
				pos: position{line: 60, col: 51, offset: 2841},
				exprs: []interface{}{
					&choiceExpr{
						pos: position{line: 60, col: 53, offset: 2843},
						alternatives: []interface{}{
							&litMatcher{
								pos:        position{line: 60, col: 53, offset: 2843},
								val:        "p",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 60, col: 59, offset: 2849},
								val:        "P",
								ignoreCase: false,
							},
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 60, col: 65, offset: 2855},
						expr: &choiceExpr{
							pos: position{line: 60, col: 67, offset: 2857},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 60, col: 67, offset: 2857},
									name: "PLUS",
								},
								&ruleRefExpr{
									pos:  position{line: 60, col: 74, offset: 2864},
									name: "MINUS",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 60, col: 83, offset: 2873},
						name: "decimal_digits",
					},
				},
			},
		},
		{
			name:        "imaginary_lit",
			displayName: "\"imaginary literal\"",
			pos:         position{line: 64, col: 1, offset: 2936},
			expr: &seqExpr{
				pos: position{line: 64, col: 51, offset: 2986},
				exprs: []interface{}{
					&choiceExpr{
						pos: position{line: 64, col: 52, offset: 2987},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 64, col: 52, offset: 2987},
								name: "decimal_digits",
							},
							&ruleRefExpr{
								pos:  position{line: 64, col: 69, offset: 3004},
								name: "int_lit",
							},
							&ruleRefExpr{
								pos:  position{line: 64, col: 79, offset: 3014},
								name: "float_lit",
							},
						},
					},
					&litMatcher{
						pos:        position{line: 64, col: 90, offset: 3025},
						val:        "i",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name:        "rune_lit",
			displayName: "\"rune literal\"",
			pos:         position{line: 68, col: 1, offset: 3077},
			expr: &seqExpr{
				pos: position{line: 68, col: 51, offset: 3127},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 68, col: 51, offset: 3127},
						name: "SQUO",
					},
					&choiceExpr{
						pos: position{line: 68, col: 58, offset: 3134},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 68, col: 58, offset: 3134},
								name: "unicode_value",
							},
							&ruleRefExpr{
								pos:  position{line: 68, col: 74, offset: 3150},
								name: "byte_value",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 68, col: 87, offset: 3163},
						name: "SQUO",
					},
				},
			},
		},
		{
			name:        "unicode_value",
			displayName: "\"unicode value\"",
			pos:         position{line: 69, col: 1, offset: 3168},
			expr: &choiceExpr{
				pos: position{line: 69, col: 51, offset: 3218},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 69, col: 51, offset: 3218},
						name: "unicode_char",
					},
					&ruleRefExpr{
						pos:  position{line: 70, col: 51, offset: 3281},
						name: "little_u_value",
					},
					&ruleRefExpr{
						pos:  position{line: 71, col: 51, offset: 3346},
						name: "big_u_value",
					},
					&ruleRefExpr{
						pos:  position{line: 72, col: 51, offset: 3408},
						name: "escaped_char",
					},
				},
			},
		},
		{
			name:        "byte_value",
			displayName: "\"byte value\"",
			pos:         position{line: 74, col: 1, offset: 3422},
			expr: &choiceExpr{
				pos: position{line: 74, col: 51, offset: 3472},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 74, col: 51, offset: 3472},
						name: "octal_byte_value",
					},
					&ruleRefExpr{
						pos:  position{line: 75, col: 51, offset: 3539},
						name: "hex_byte_value",
					},
				},
			},
		},
		{
			name:        "octal_byte_value",
			displayName: "\"octal byte value\"",
			pos:         position{line: 77, col: 1, offset: 3555},
			expr: &seqExpr{
				pos: position{line: 77, col: 51, offset: 3605},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 77, col: 51, offset: 3605},
						name: "BQUO",
					},
					&ruleRefExpr{
						pos:  position{line: 77, col: 56, offset: 3610},
						name: "octal_digit",
					},
					&ruleRefExpr{
						pos:  position{line: 77, col: 68, offset: 3622},
						name: "octal_digit",
					},
					&ruleRefExpr{
						pos:  position{line: 77, col: 80, offset: 3634},
						name: "octal_digit",
					},
				},
			},
		},
		{
			name:        "hex_byte_value",
			displayName: "\"hexadecimal byte value\"",
			pos:         position{line: 78, col: 1, offset: 3646},
			expr: &seqExpr{
				pos: position{line: 78, col: 51, offset: 3696},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 78, col: 51, offset: 3696},
						name: "BQUO",
					},
					&litMatcher{
						pos:        position{line: 78, col: 56, offset: 3701},
						val:        "x",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 78, col: 60, offset: 3705},
						name: "hex_digit",
					},
					&ruleRefExpr{
						pos:  position{line: 78, col: 70, offset: 3715},
						name: "hex_digit",
					},
				},
			},
		},
		{
			name:        "little_u_value",
			displayName: "\"little u value\"",
			pos:         position{line: 79, col: 1, offset: 3725},
			expr: &seqExpr{
				pos: position{line: 79, col: 51, offset: 3775},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 79, col: 51, offset: 3775},
						name: "BQUO",
					},
					&litMatcher{
						pos:        position{line: 79, col: 56, offset: 3780},
						val:        "u",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 79, col: 60, offset: 3784},
						name: "hex_digit",
					},
					&ruleRefExpr{
						pos:  position{line: 79, col: 70, offset: 3794},
						name: "hex_digit",
					},
					&ruleRefExpr{
						pos:  position{line: 79, col: 80, offset: 3804},
						name: "hex_digit",
					},
					&ruleRefExpr{
						pos:  position{line: 79, col: 90, offset: 3814},
						name: "hex_digit",
					},
				},
			},
		},
		{
			name:        "big_u_value",
			displayName: "\"big U value\"",
			pos:         position{line: 80, col: 1, offset: 3824},
			expr: &seqExpr{
				pos: position{line: 80, col: 51, offset: 3874},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 80, col: 51, offset: 3874},
						name: "BQUO",
					},
					&litMatcher{
						pos:        position{line: 80, col: 56, offset: 3879},
						val:        "U",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 80, col: 60, offset: 3883},
						name: "hex_digit",
					},
					&ruleRefExpr{
						pos:  position{line: 80, col: 70, offset: 3893},
						name: "hex_digit",
					},
					&ruleRefExpr{
						pos:  position{line: 80, col: 80, offset: 3903},
						name: "hex_digit",
					},
					&ruleRefExpr{
						pos:  position{line: 80, col: 90, offset: 3913},
						name: "hex_digit",
					},
					&ruleRefExpr{
						pos:  position{line: 81, col: 59, offset: 3981},
						name: "hex_digit",
					},
					&ruleRefExpr{
						pos:  position{line: 81, col: 69, offset: 3991},
						name: "hex_digit",
					},
					&ruleRefExpr{
						pos:  position{line: 81, col: 79, offset: 4001},
						name: "hex_digit",
					},
					&ruleRefExpr{
						pos:  position{line: 81, col: 89, offset: 4011},
						name: "hex_digit",
					},
				},
			},
		},
		{
			name:        "escaped_char",
			displayName: "\"rune escaped char\"",
			pos:         position{line: 83, col: 1, offset: 4022},
			expr: &seqExpr{
				pos: position{line: 83, col: 51, offset: 4072},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 83, col: 51, offset: 4072},
						name: "BSLASH",
					},
					&choiceExpr{
						pos: position{line: 83, col: 60, offset: 4081},
						alternatives: []interface{}{
							&litMatcher{
								pos:        position{line: 83, col: 60, offset: 4081},
								val:        "a",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 83, col: 66, offset: 4087},
								val:        "b",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 83, col: 72, offset: 4093},
								val:        "f",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 83, col: 78, offset: 4099},
								val:        "n",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 83, col: 84, offset: 4105},
								val:        "r",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 83, col: 90, offset: 4111},
								val:        "t",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 83, col: 96, offset: 4117},
								val:        "v",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 83, col: 102, offset: 4123},
								name: "BSLASH",
							},
							&ruleRefExpr{
								pos:  position{line: 83, col: 111, offset: 4132},
								name: "SQUO",
							},
							&ruleRefExpr{
								pos:  position{line: 83, col: 118, offset: 4139},
								name: "DQUO",
							},
						},
					},
				},
			},
		},
		{
			name:        "string_lit",
			displayName: "\"string literal\"",
			pos:         position{line: 87, col: 1, offset: 4194},
			expr: &choiceExpr{
				pos: position{line: 87, col: 55, offset: 4248},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 87, col: 55, offset: 4248},
						name: "raw_string_lit",
					},
					&ruleRefExpr{
						pos:  position{line: 88, col: 55, offset: 4317},
						name: "interpreted_string_lit",
					},
				},
			},
		},
		{
			name:        "raw_string_lit",
			displayName: "\"raw string literal\"",
			pos:         position{line: 90, col: 1, offset: 4341},
			expr: &seqExpr{
				pos: position{line: 90, col: 55, offset: 4395},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 90, col: 55, offset: 4395},
						name: "BQUO",
					},
					&zeroOrMoreExpr{
						pos: position{line: 90, col: 60, offset: 4400},
						expr: &choiceExpr{
							pos: position{line: 90, col: 62, offset: 4402},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 90, col: 62, offset: 4402},
									name: "unicode_char",
								},
								&ruleRefExpr{
									pos:  position{line: 90, col: 77, offset: 4417},
									name: "newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 90, col: 88, offset: 4428},
						name: "BQUO",
					},
				},
			},
		},
		{
			name:        "interpreted_string_lit",
			displayName: "\"interpreted string literal\"",
			pos:         position{line: 91, col: 1, offset: 4433},
			expr: &seqExpr{
				pos: position{line: 91, col: 55, offset: 4487},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 91, col: 55, offset: 4487},
						name: "DQUO",
					},
					&zeroOrMoreExpr{
						pos: position{line: 91, col: 60, offset: 4492},
						expr: &choiceExpr{
							pos: position{line: 91, col: 62, offset: 4494},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 91, col: 62, offset: 4494},
									name: "unicode_value",
								},
								&ruleRefExpr{
									pos:  position{line: 91, col: 78, offset: 4510},
									name: "byte_value",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 91, col: 92, offset: 4524},
						name: "DQUO",
					},
				},
			},
		},
		{
			name:        "Type",
			displayName: "\"type\"",
			pos:         position{line: 95, col: 1, offset: 4577},
			expr: &choiceExpr{
				pos: position{line: 95, col: 51, offset: 4627},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 95, col: 51, offset: 4627},
						name: "TypeName",
					},
					&ruleRefExpr{
						pos:  position{line: 96, col: 51, offset: 4686},
						name: "TypeLit",
					},
					&seqExpr{
						pos: position{line: 97, col: 51, offset: 4744},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 97, col: 51, offset: 4744},
								name: "LPAREN",
							},
							&ruleRefExpr{
								pos:  position{line: 97, col: 58, offset: 4751},
								name: "Type",
							},
							&ruleRefExpr{
								pos:  position{line: 97, col: 63, offset: 4756},
								name: "RPAREN",
							},
						},
					},
				},
			},
		},
		{
			name:        "TypeName",
			displayName: "\"type name\"",
			pos:         position{line: 99, col: 1, offset: 4764},
			expr: &choiceExpr{
				pos: position{line: 99, col: 51, offset: 4814},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 99, col: 51, offset: 4814},
						name: "identifier",
					},
					&ruleRefExpr{
						pos:  position{line: 100, col: 51, offset: 4875},
						name: "QualifiedIdent",
					},
				},
			},
		},
		{
			name:        "TypeLit",
			displayName: "\"type literal\"",
			pos:         position{line: 102, col: 1, offset: 4891},
			expr: &choiceExpr{
				pos: position{line: 102, col: 51, offset: 4941},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 102, col: 51, offset: 4941},
						name: "ArrayType",
					},
					&ruleRefExpr{
						pos:  position{line: 103, col: 51, offset: 5001},
						name: "StructType",
					},
					&ruleRefExpr{
						pos:  position{line: 104, col: 51, offset: 5062},
						name: "PointerType",
					},
					&ruleRefExpr{
						pos:  position{line: 105, col: 51, offset: 5124},
						name: "FunctionType",
					},
					&ruleRefExpr{
						pos:  position{line: 106, col: 51, offset: 5187},
						name: "InterfaceType",
					},
					&ruleRefExpr{
						pos:  position{line: 107, col: 51, offset: 5251},
						name: "SliceType",
					},
					&ruleRefExpr{
						pos:  position{line: 108, col: 51, offset: 5311},
						name: "MapType",
					},
					&ruleRefExpr{
						pos:  position{line: 109, col: 51, offset: 5369},
						name: "ChannelType",
					},
				},
			},
		},
		{
			name:        "ArrayType",
			displayName: "\"array type\"",
			pos:         position{line: 113, col: 1, offset: 5429},
			expr: &seqExpr{
				pos: position{line: 113, col: 51, offset: 5479},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 113, col: 51, offset: 5479},
						name: "LBRACK",
					},
					&ruleRefExpr{
						pos:  position{line: 113, col: 58, offset: 5486},
						name: "ArrayLength",
					},
					&ruleRefExpr{
						pos:  position{line: 113, col: 70, offset: 5498},
						name: "RBRACK",
					},
					&ruleRefExpr{
						pos:  position{line: 113, col: 77, offset: 5505},
						name: "ElementType",
					},
				},
			},
		},
		{
			name:        "ArrayLength",
			displayName: "\"array length\"",
			pos:         position{line: 114, col: 1, offset: 5517},
			expr: &ruleRefExpr{
				pos:  position{line: 114, col: 51, offset: 5567},
				name: "Expression",
			},
		},
		{
			name:        "ElementType",
			displayName: "\"element type\"",
			pos:         position{line: 115, col: 1, offset: 5578},
			expr: &ruleRefExpr{
				pos:  position{line: 115, col: 51, offset: 5628},
				name: "Type",
			},
		},
		{
			name:        "SliceType",
			displayName: "\"slice type\"",
			pos:         position{line: 119, col: 1, offset: 5681},
			expr: &seqExpr{
				pos: position{line: 119, col: 51, offset: 5731},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 119, col: 51, offset: 5731},
						name: "LBRACK",
					},
					&ruleRefExpr{
						pos:  position{line: 119, col: 58, offset: 5738},
						name: "RBRACK",
					},
					&ruleRefExpr{
						pos:  position{line: 119, col: 65, offset: 5745},
						name: "ElementType",
					},
				},
			},
		},
		{
			name:        "StructType",
			displayName: "\"struct type\"",
			pos:         position{line: 123, col: 1, offset: 5805},
			expr: &seqExpr{
				pos: position{line: 123, col: 51, offset: 5855},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 123, col: 51, offset: 5855},
						val:        "struct",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 123, col: 60, offset: 5864},
						name: "LBRACE",
					},
					&zeroOrMoreExpr{
						pos: position{line: 123, col: 67, offset: 5871},
						expr: &seqExpr{
							pos: position{line: 123, col: 69, offset: 5873},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 123, col: 69, offset: 5873},
									name: "FieldDecl",
								},
								&ruleRefExpr{
									pos:  position{line: 123, col: 79, offset: 5883},
									name: "SEMICOLON",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 123, col: 92, offset: 5896},
						name: "RBRACE",
					},
				},
			},
		},
		{
			name:        "FieldDecl",
			displayName: "\"struct field declaration\"",
			pos:         position{line: 124, col: 1, offset: 5903},
			expr: &seqExpr{
				pos: position{line: 124, col: 51, offset: 5953},
				exprs: []interface{}{
					&choiceExpr{
						pos: position{line: 124, col: 52, offset: 5954},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 124, col: 52, offset: 5954},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 124, col: 52, offset: 5954},
										name: "IdentifierList",
									},
									&ruleRefExpr{
										pos:  position{line: 124, col: 67, offset: 5969},
										name: "Type",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 124, col: 74, offset: 5976},
								name: "EmbeddedField",
							},
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 124, col: 89, offset: 5991},
						expr: &ruleRefExpr{
							pos:  position{line: 124, col: 91, offset: 5993},
							name: "Tag",
						},
					},
				},
			},
		},
		{
			name:        "EmbeddedField",
			displayName: "\"struct embedded field\"",
			pos:         position{line: 125, col: 1, offset: 6000},
			expr: &seqExpr{
				pos: position{line: 125, col: 51, offset: 6050},
				exprs: []interface{}{
					&zeroOrOneExpr{
						pos: position{line: 125, col: 51, offset: 6050},
						expr: &ruleRefExpr{
							pos:  position{line: 125, col: 53, offset: 6052},
							name: "ASTERISK",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 125, col: 65, offset: 6064},
						name: "TypeName",
					},
				},
			},
		},
		{
			name:        "Tag",
			displayName: "\"struct tag\"",
			pos:         position{line: 126, col: 1, offset: 6073},
			expr: &ruleRefExpr{
				pos:  position{line: 126, col: 51, offset: 6123},
				name: "string_lit",
			},
		},
		{
			name:        "PointerType",
			displayName: "\"pointer type\"",
			pos:         position{line: 130, col: 1, offset: 6182},
			expr: &seqExpr{
				pos: position{line: 130, col: 51, offset: 6232},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 130, col: 51, offset: 6232},
						name: "ASTERISK",
					},
					&ruleRefExpr{
						pos:  position{line: 130, col: 60, offset: 6241},
						name: "BaseType",
					},
				},
			},
		},
		{
			name:        "BaseType",
			displayName: "\"base type\"",
			pos:         position{line: 131, col: 1, offset: 6250},
			expr: &ruleRefExpr{
				pos:  position{line: 131, col: 51, offset: 6300},
				name: "Type",
			},
		},
		{
			name:        "FunctionType",
			displayName: "\"function type\"",
			pos:         position{line: 135, col: 1, offset: 6353},
			expr: &seqExpr{
				pos: position{line: 135, col: 53, offset: 6405},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 135, col: 53, offset: 6405},
						val:        "func",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 135, col: 60, offset: 6412},
						name: "Signature",
					},
				},
			},
		},
		{
			name:        "Signature",
			displayName: "\"function signature\"",
			pos:         position{line: 136, col: 1, offset: 6422},
			expr: &seqExpr{
				pos: position{line: 136, col: 53, offset: 6474},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 136, col: 53, offset: 6474},
						name: "Parameters",
					},
					&zeroOrOneExpr{
						pos: position{line: 136, col: 64, offset: 6485},
						expr: &ruleRefExpr{
							pos:  position{line: 136, col: 66, offset: 6487},
							name: "Result",
						},
					},
				},
			},
		},
		{
			name:        "Result",
			displayName: "\"function result\"",
			pos:         position{line: 137, col: 1, offset: 6497},
			expr: &choiceExpr{
				pos: position{line: 137, col: 53, offset: 6549},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 137, col: 53, offset: 6549},
						name: "Parameters",
					},
					&ruleRefExpr{
						pos:  position{line: 138, col: 53, offset: 6612},
						name: "Type",
					},
				},
			},
		},
		{
			name:        "Parameters",
			displayName: "\"function parameters\"",
			pos:         position{line: 139, col: 1, offset: 6617},
			expr: &seqExpr{
				pos: position{line: 139, col: 53, offset: 6669},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 139, col: 53, offset: 6669},
						name: "LPAREN",
					},
					&zeroOrOneExpr{
						pos: position{line: 139, col: 60, offset: 6676},
						expr: &seqExpr{
							pos: position{line: 139, col: 62, offset: 6678},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 139, col: 62, offset: 6678},
									name: "ParameterList",
								},
								&zeroOrOneExpr{
									pos: position{line: 139, col: 76, offset: 6692},
									expr: &ruleRefExpr{
										pos:  position{line: 139, col: 78, offset: 6694},
										name: "COMMA",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 139, col: 90, offset: 6706},
						name: "RPAREN",
					},
				},
			},
		},
		{
			name:        "ParameterList",
			displayName: "\"function parameter list\"",
			pos:         position{line: 140, col: 1, offset: 6713},
			expr: &seqExpr{
				pos: position{line: 140, col: 53, offset: 6765},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 140, col: 53, offset: 6765},
						name: "ParameterDecl",
					},
					&zeroOrOneExpr{
						pos: position{line: 140, col: 67, offset: 6779},
						expr: &seqExpr{
							pos: position{line: 140, col: 69, offset: 6781},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 140, col: 69, offset: 6781},
									name: "COMMA",
								},
								&ruleRefExpr{
									pos:  position{line: 140, col: 75, offset: 6787},
									name: "ParameterDecl",
								},
							},
						},
					},
				},
			},
		},
		{
			name:        "ParameterDecl",
			displayName: "\"function parameter declaration\"",
			pos:         position{line: 141, col: 1, offset: 6804},
			expr: &seqExpr{
				pos: position{line: 141, col: 53, offset: 6856},
				exprs: []interface{}{
					&zeroOrOneExpr{
						pos: position{line: 141, col: 53, offset: 6856},
						expr: &ruleRefExpr{
							pos:  position{line: 141, col: 55, offset: 6858},
							name: "IdentifierList",
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 141, col: 73, offset: 6876},
						expr: &ruleRefExpr{
							pos:  position{line: 141, col: 75, offset: 6878},
							name: "ELLIPSIS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 141, col: 87, offset: 6890},
						name: "Type",
					},
				},
			},
		},
		{
			name:        "InterfaceType",
			displayName: "\"interface type\"",
			pos:         position{line: 145, col: 1, offset: 6943},
			expr: &seqExpr{
				pos: position{line: 145, col: 51, offset: 6993},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 145, col: 51, offset: 6993},
						val:        "interface",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 145, col: 63, offset: 7005},
						name: "LBRACE",
					},
					&zeroOrOneExpr{
						pos: position{line: 145, col: 70, offset: 7012},
						expr: &seqExpr{
							pos: position{line: 145, col: 72, offset: 7014},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 145, col: 72, offset: 7014},
									name: "MethodSpec",
								},
								&ruleRefExpr{
									pos:  position{line: 145, col: 83, offset: 7025},
									name: "SEMICOLON",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 145, col: 96, offset: 7038},
						name: "RBRACE",
					},
				},
			},
		},
		{
			name:        "MethodSpec",
			displayName: "\"method specification\"",
			pos:         position{line: 146, col: 1, offset: 7045},
			expr: &choiceExpr{
				pos: position{line: 146, col: 51, offset: 7095},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 146, col: 51, offset: 7095},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 146, col: 51, offset: 7095},
								name: "MethodName",
							},
							&ruleRefExpr{
								pos:  position{line: 146, col: 62, offset: 7106},
								name: "Signature",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 147, col: 51, offset: 7166},
						name: "InterfaceTypeName",
					},
				},
			},
		},
		{
			name:        "MethodName",
			displayName: "\"method name\"",
			pos:         position{line: 149, col: 1, offset: 7185},
			expr: &ruleRefExpr{
				pos:  position{line: 149, col: 51, offset: 7235},
				name: "identifier",
			},
		},
		{
			name:        "InterfaceTypeName",
			displayName: "\"interface type name\"",
			pos:         position{line: 150, col: 1, offset: 7246},
			expr: &ruleRefExpr{
				pos:  position{line: 150, col: 51, offset: 7296},
				name: "TypeName",
			},
		},
		{
			name:        "MapType",
			displayName: "\"map type\"",
			pos:         position{line: 154, col: 1, offset: 7353},
			expr: &seqExpr{
				pos: position{line: 154, col: 51, offset: 7403},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 154, col: 51, offset: 7403},
						val:        "map",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 154, col: 57, offset: 7409},
						name: "LBRACK",
					},
					&ruleRefExpr{
						pos:  position{line: 154, col: 64, offset: 7416},
						name: "KeyType",
					},
					&ruleRefExpr{
						pos:  position{line: 154, col: 72, offset: 7424},
						name: "RBRACK",
					},
					&ruleRefExpr{
						pos:  position{line: 154, col: 79, offset: 7431},
						name: "ElementType",
					},
				},
			},
		},
		{
			name:        "KeyType",
			displayName: "\"map key type\"",
			pos:         position{line: 155, col: 1, offset: 7443},
			expr: &ruleRefExpr{
				pos:  position{line: 155, col: 51, offset: 7493},
				name: "Type",
			},
		},
		{
			name:        "ChannelType",
			displayName: "\"channel type\"",
			pos:         position{line: 159, col: 1, offset: 7546},
			expr: &seqExpr{
				pos: position{line: 159, col: 51, offset: 7596},
				exprs: []interface{}{
					&choiceExpr{
						pos: position{line: 159, col: 53, offset: 7598},
						alternatives: []interface{}{
							&litMatcher{
								pos:        position{line: 159, col: 53, offset: 7598},
								val:        "chan",
								ignoreCase: false,
							},
							&seqExpr{
								pos: position{line: 159, col: 62, offset: 7607},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 159, col: 62, offset: 7607},
										val:        "chan",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 159, col: 69, offset: 7614},
										name: "ARROW",
									},
								},
							},
							&seqExpr{
								pos: position{line: 159, col: 77, offset: 7622},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 159, col: 77, offset: 7622},
										name: "ARROW",
									},
									&litMatcher{
										pos:        position{line: 159, col: 83, offset: 7628},
										val:        "chan",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 159, col: 92, offset: 7637},
						name: "ElementType",
					},
				},
			},
		},
		{
			name:        "Block",
			displayName: "\"block\"",
			pos:         position{line: 163, col: 1, offset: 7697},
			expr: &seqExpr{
				pos: position{line: 163, col: 51, offset: 7747},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 163, col: 51, offset: 7747},
						name: "LBRACE",
					},
					&ruleRefExpr{
						pos:  position{line: 163, col: 58, offset: 7754},
						name: "StatementList",
					},
					&ruleRefExpr{
						pos:  position{line: 163, col: 72, offset: 7768},
						name: "RBRACE",
					},
				},
			},
		},
		{
			name:        "StatementList",
			displayName: "\"statement list\"",
			pos:         position{line: 164, col: 1, offset: 7775},
			expr: &zeroOrMoreExpr{
				pos: position{line: 164, col: 51, offset: 7825},
				expr: &seqExpr{
					pos: position{line: 164, col: 53, offset: 7827},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 164, col: 53, offset: 7827},
							name: "Statement",
						},
						&ruleRefExpr{
							pos:  position{line: 164, col: 63, offset: 7837},
							name: "SEMICOLON",
						},
					},
				},
			},
		},
		{
			name:        "Declaration",
			displayName: "\"declaration\"",
			pos:         position{line: 168, col: 1, offset: 7898},
			expr: &choiceExpr{
				pos: position{line: 168, col: 51, offset: 7948},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 168, col: 51, offset: 7948},
						name: "ConstDecl",
					},
					&ruleRefExpr{
						pos:  position{line: 169, col: 51, offset: 8008},
						name: "TypeDecl",
					},
					&ruleRefExpr{
						pos:  position{line: 170, col: 51, offset: 8067},
						name: "VarDecl",
					},
				},
			},
		},
		{
			name:        "TopLevelDecl",
			displayName: "\"top-level declaration\"",
			pos:         position{line: 172, col: 1, offset: 8076},
			expr: &choiceExpr{
				pos: position{line: 172, col: 51, offset: 8126},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 172, col: 51, offset: 8126},
						name: "Declaration",
					},
					&ruleRefExpr{
						pos:  position{line: 173, col: 51, offset: 8188},
						name: "FunctionDecl",
					},
					&ruleRefExpr{
						pos:  position{line: 174, col: 51, offset: 8251},
						name: "MethodDecl",
					},
				},
			},
		},
		{
			name:        "ConstDecl",
			displayName: "\"constant declaration\"",
			pos:         position{line: 178, col: 1, offset: 8310},
			expr: &seqExpr{
				pos: position{line: 178, col: 51, offset: 8360},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 178, col: 51, offset: 8360},
						val:        "const",
						ignoreCase: false,
					},
					&choiceExpr{
						pos: position{line: 178, col: 61, offset: 8370},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 178, col: 61, offset: 8370},
								name: "ConstSpec",
							},
							&seqExpr{
								pos: position{line: 178, col: 73, offset: 8382},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 178, col: 73, offset: 8382},
										name: "LPAREN",
									},
									&zeroOrMoreExpr{
										pos: position{line: 178, col: 80, offset: 8389},
										expr: &seqExpr{
											pos: position{line: 178, col: 82, offset: 8391},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 178, col: 82, offset: 8391},
													name: "ConstSpec",
												},
												&ruleRefExpr{
													pos:  position{line: 178, col: 92, offset: 8401},
													name: "SEMICOLON",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 178, col: 105, offset: 8414},
										name: "RPAREN",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name:        "ConstSpec",
			displayName: "\"constant specification\"",
			pos:         position{line: 179, col: 1, offset: 8423},
			expr: &seqExpr{
				pos: position{line: 179, col: 51, offset: 8473},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 179, col: 51, offset: 8473},
						name: "IdentifierList",
					},
					&zeroOrOneExpr{
						pos: position{line: 179, col: 66, offset: 8488},
						expr: &seqExpr{
							pos: position{line: 179, col: 68, offset: 8490},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 179, col: 68, offset: 8490},
									expr: &ruleRefExpr{
										pos:  position{line: 179, col: 70, offset: 8492},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 179, col: 78, offset: 8500},
									name: "EQUAL",
								},
								&ruleRefExpr{
									pos:  position{line: 179, col: 84, offset: 8506},
									name: "ExpressionList",
								},
							},
						},
					},
				},
			},
		},
		{
			name:        "IdentifierList",
			displayName: "\"identifier list\"",
			pos:         position{line: 181, col: 1, offset: 8525},
			expr: &seqExpr{
				pos: position{line: 181, col: 51, offset: 8575},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 181, col: 51, offset: 8575},
						name: "identifier",
					},
					&zeroOrMoreExpr{
						pos: position{line: 181, col: 62, offset: 8586},
						expr: &seqExpr{
							pos: position{line: 181, col: 64, offset: 8588},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 181, col: 64, offset: 8588},
									name: "COMMA",
								},
								&ruleRefExpr{
									pos:  position{line: 181, col: 70, offset: 8594},
									name: "identifier",
								},
							},
						},
					},
				},
			},
		},
		{
			name:        "ExpressionList",
			displayName: "\"expression list\"",
			pos:         position{line: 182, col: 1, offset: 8608},
			expr: &seqExpr{
				pos: position{line: 182, col: 51, offset: 8658},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 182, col: 51, offset: 8658},
						name: "Expression",
					},
					&zeroOrMoreExpr{
						pos: position{line: 182, col: 62, offset: 8669},
						expr: &seqExpr{
							pos: position{line: 182, col: 64, offset: 8671},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 182, col: 64, offset: 8671},
									name: "COMMA",
								},
								&ruleRefExpr{
									pos:  position{line: 182, col: 70, offset: 8677},
									name: "Expression",
								},
							},
						},
					},
				},
			},
		},
		{
			name:        "TypeDecl",
			displayName: "\"type declaration\"",
			pos:         position{line: 186, col: 1, offset: 8739},
			expr: &seqExpr{
				pos: position{line: 186, col: 51, offset: 8789},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 186, col: 51, offset: 8789},
						val:        "type",
						ignoreCase: false,
					},
					&choiceExpr{
						pos: position{line: 186, col: 60, offset: 8798},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 186, col: 60, offset: 8798},
								name: "TypeSpec",
							},
							&seqExpr{
								pos: position{line: 186, col: 71, offset: 8809},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 186, col: 71, offset: 8809},
										name: "LPAREN",
									},
									&zeroOrOneExpr{
										pos: position{line: 186, col: 78, offset: 8816},
										expr: &seqExpr{
											pos: position{line: 186, col: 80, offset: 8818},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 186, col: 80, offset: 8818},
													name: "TypeSpec",
												},
												&ruleRefExpr{
													pos:  position{line: 186, col: 89, offset: 8827},
													name: "SEMICOLON",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 186, col: 102, offset: 8840},
										name: "RPAREN",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name:        "TypeSpec",
			displayName: "\"type specification\"",
			pos:         position{line: 187, col: 1, offset: 8849},
			expr: &choiceExpr{
				pos: position{line: 187, col: 51, offset: 8899},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 187, col: 51, offset: 8899},
						name: "AliasDecl",
					},
					&ruleRefExpr{
						pos:  position{line: 188, col: 51, offset: 8959},
						name: "TypeDef",
					},
				},
			},
		},
		{
			name:        "AliasDecl",
			displayName: "\"type alias declaration\"",
			pos:         position{line: 192, col: 1, offset: 9015},
			expr: &seqExpr{
				pos: position{line: 192, col: 51, offset: 9065},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 192, col: 51, offset: 9065},
						name: "identifier",
					},
					&ruleRefExpr{
						pos:  position{line: 192, col: 62, offset: 9076},
						name: "EQUAL",
					},
					&ruleRefExpr{
						pos:  position{line: 192, col: 68, offset: 9082},
						name: "Type",
					},
				},
			},
		},
		{
			name:        "TypeDef",
			displayName: "\"type definition\"",
			pos:         position{line: 196, col: 1, offset: 9135},
			expr: &seqExpr{
				pos: position{line: 196, col: 51, offset: 9185},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 196, col: 51, offset: 9185},
						name: "identifier",
					},
					&ruleRefExpr{
						pos:  position{line: 196, col: 62, offset: 9196},
						name: "Type",
					},
				},
			},
		},
		{
			name:        "VarDecl",
			displayName: "\"variable declaration\"",
			pos:         position{line: 200, col: 1, offset: 9249},
			expr: &seqExpr{
				pos: position{line: 200, col: 51, offset: 9299},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 200, col: 51, offset: 9299},
						val:        "var",
						ignoreCase: false,
					},
					&choiceExpr{
						pos: position{line: 200, col: 59, offset: 9307},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 200, col: 59, offset: 9307},
								name: "VarSpec",
							},
							&seqExpr{
								pos: position{line: 200, col: 69, offset: 9317},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 200, col: 69, offset: 9317},
										name: "LPAREN",
									},
									&zeroOrMoreExpr{
										pos: position{line: 200, col: 76, offset: 9324},
										expr: &seqExpr{
											pos: position{line: 200, col: 78, offset: 9326},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 200, col: 78, offset: 9326},
													name: "VarSpec",
												},
												&ruleRefExpr{
													pos:  position{line: 200, col: 86, offset: 9334},
													name: "SEMICOLON",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 200, col: 99, offset: 9347},
										name: "RPAREN",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name:        "VarSpec",
			displayName: "\"variabpe specification\"",
			pos:         position{line: 201, col: 1, offset: 9356},
			expr: &seqExpr{
				pos: position{line: 201, col: 51, offset: 9406},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 201, col: 51, offset: 9406},
						name: "IdentifierList",
					},
					&choiceExpr{
						pos: position{line: 201, col: 68, offset: 9423},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 201, col: 68, offset: 9423},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 201, col: 68, offset: 9423},
										name: "Type",
									},
									&zeroOrMoreExpr{
										pos: position{line: 201, col: 73, offset: 9428},
										expr: &seqExpr{
											pos: position{line: 201, col: 75, offset: 9430},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 201, col: 75, offset: 9430},
													name: "EQUAL",
												},
												&ruleRefExpr{
													pos:  position{line: 201, col: 81, offset: 9436},
													name: "ExpressionList",
												},
											},
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 201, col: 101, offset: 9456},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 201, col: 101, offset: 9456},
										name: "EQUAL",
									},
									&ruleRefExpr{
										pos:  position{line: 201, col: 107, offset: 9462},
										name: "ExpressionList",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name:        "ShortVarDecl",
			displayName: "\"short declaration of variable\"",
			pos:         position{line: 205, col: 1, offset: 9527},
			expr: &seqExpr{
				pos: position{line: 205, col: 51, offset: 9577},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 205, col: 51, offset: 9577},
						name: "IdentifierList",
					},
					&ruleRefExpr{
						pos:  position{line: 205, col: 66, offset: 9592},
						name: "DEFINE",
					},
					&ruleRefExpr{
						pos:  position{line: 205, col: 73, offset: 9599},
						name: "ExpressionList",
					},
				},
			},
		},
		{
			name:        "FunctionDecl",
			displayName: "\"function declaration\"",
			pos:         position{line: 209, col: 1, offset: 9662},
			expr: &seqExpr{
				pos: position{line: 209, col: 51, offset: 9712},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 209, col: 51, offset: 9712},
						val:        "func",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 209, col: 58, offset: 9719},
						name: "FunctionName",
					},
					&ruleRefExpr{
						pos:  position{line: 209, col: 71, offset: 9732},
						name: "Signature",
					},
					&zeroOrOneExpr{
						pos: position{line: 209, col: 81, offset: 9742},
						expr: &ruleRefExpr{
							pos:  position{line: 209, col: 83, offset: 9744},
							name: "FunctionBody",
						},
					},
				},
			},
		},
		{
			name:        "FunctionName",
			displayName: "\"function name\"",
			pos:         position{line: 210, col: 1, offset: 9760},
			expr: &ruleRefExpr{
				pos:  position{line: 210, col: 51, offset: 9810},
				name: "identifier",
			},
		},
		{
			name:        "FunctionBody",
			displayName: "\"function body\"",
			pos:         position{line: 211, col: 1, offset: 9821},
			expr: &ruleRefExpr{
				pos:  position{line: 211, col: 51, offset: 9871},
				name: "Block",
			},
		},
		{
			name:        "MethodDecl",
			displayName: "\"method declaration\"",
			pos:         position{line: 215, col: 1, offset: 9925},
			expr: &seqExpr{
				pos: position{line: 215, col: 51, offset: 9975},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 215, col: 51, offset: 9975},
						val:        "func",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 215, col: 58, offset: 9982},
						name: "Receiver",
					},
					&ruleRefExpr{
						pos:  position{line: 215, col: 67, offset: 9991},
						name: "MethodName",
					},
					&ruleRefExpr{
						pos:  position{line: 215, col: 78, offset: 10002},
						name: "Signature",
					},
					&zeroOrOneExpr{
						pos: position{line: 215, col: 88, offset: 10012},
						expr: &ruleRefExpr{
							pos:  position{line: 215, col: 90, offset: 10014},
							name: "FunctionBody",
						},
					},
				},
			},
		},
		{
			name:        "Receiver",
			displayName: "\"method receiver\"",
			pos:         position{line: 216, col: 1, offset: 10030},
			expr: &ruleRefExpr{
				pos:  position{line: 216, col: 51, offset: 10080},
				name: "Parameters",
			},
		},
		{
			name:        "Operand",
			displayName: "\"operand\"",
			pos:         position{line: 220, col: 1, offset: 10139},
			expr: &choiceExpr{
				pos: position{line: 220, col: 51, offset: 10189},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 220, col: 51, offset: 10189},
						name: "Literal",
					},
					&ruleRefExpr{
						pos:  position{line: 221, col: 51, offset: 10247},
						name: "OperandName",
					},
					&seqExpr{
						pos: position{line: 222, col: 51, offset: 10309},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 222, col: 51, offset: 10309},
								name: "LPAREN",
							},
							&ruleRefExpr{
								pos:  position{line: 222, col: 58, offset: 10316},
								name: "Expression",
							},
							&ruleRefExpr{
								pos:  position{line: 222, col: 69, offset: 10327},
								name: "RPAREN",
							},
						},
					},
				},
			},
		},
		{
			name:        "Literal",
			displayName: "\"literal\"",
			pos:         position{line: 224, col: 1, offset: 10335},
			expr: &choiceExpr{
				pos: position{line: 224, col: 51, offset: 10385},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 224, col: 51, offset: 10385},
						name: "BasicLit",
					},
					&ruleRefExpr{
						pos:  position{line: 225, col: 51, offset: 10444},
						name: "CompositeLit",
					},
					&ruleRefExpr{
						pos:  position{line: 226, col: 51, offset: 10507},
						name: "FunctionLit",
					},
				},
			},
		},
		{
			name:        "BasicLit",
			displayName: "\"basic literal\"",
			pos:         position{line: 228, col: 1, offset: 10520},
			expr: &choiceExpr{
				pos: position{line: 228, col: 51, offset: 10570},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 228, col: 51, offset: 10570},
						name: "int_lit",
					},
					&ruleRefExpr{
						pos:  position{line: 229, col: 51, offset: 10628},
						name: "float_lit",
					},
					&ruleRefExpr{
						pos:  position{line: 230, col: 51, offset: 10688},
						name: "imaginary_lit",
					},
					&ruleRefExpr{
						pos:  position{line: 231, col: 51, offset: 10752},
						name: "rune_lit",
					},
					&ruleRefExpr{
						pos:  position{line: 232, col: 51, offset: 10811},
						name: "string_lit",
					},
				},
			},
		},
		{
			name:        "OperandName",
			displayName: "\"operand name\"",
			pos:         position{line: 234, col: 1, offset: 10823},
			expr: &choiceExpr{
				pos: position{line: 234, col: 51, offset: 10873},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 234, col: 51, offset: 10873},
						name: "identifier",
					},
					&ruleRefExpr{
						pos:  position{line: 235, col: 51, offset: 10934},
						name: "QualifiedIdent",
					},
				},
			},
		},
		{
			name:        "QualifiedIdent",
			displayName: "\"qualified identifier\"",
			pos:         position{line: 239, col: 1, offset: 10997},
			expr: &seqExpr{
				pos: position{line: 239, col: 51, offset: 11047},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 239, col: 51, offset: 11047},
						name: "PackageName",
					},
					&ruleRefExpr{
						pos:  position{line: 239, col: 63, offset: 11059},
						name: "DOT",
					},
					&ruleRefExpr{
						pos:  position{line: 239, col: 67, offset: 11063},
						name: "identifier",
					},
				},
			},
		},
		{
			name:        "CompositeLit",
			displayName: "\"composite literal\"",
			pos:         position{line: 243, col: 1, offset: 11122},
			expr: &seqExpr{
				pos: position{line: 243, col: 51, offset: 11172},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 243, col: 51, offset: 11172},
						name: "LiteralType",
					},
					&ruleRefExpr{
						pos:  position{line: 243, col: 63, offset: 11184},
						name: "LiteralValue",
					},
				},
			},
		},
		{
			name:        "LiteralType",
			displayName: "\"literal type\"",
			pos:         position{line: 244, col: 1, offset: 11197},
			expr: &choiceExpr{
				pos: position{line: 244, col: 51, offset: 11247},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 244, col: 51, offset: 11247},
						name: "StructType",
					},
					&ruleRefExpr{
						pos:  position{line: 245, col: 51, offset: 11308},
						name: "ArrayType",
					},
					&seqExpr{
						pos: position{line: 246, col: 51, offset: 11368},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 246, col: 51, offset: 11368},
								name: "LBRACK",
							},
							&ruleRefExpr{
								pos:  position{line: 246, col: 58, offset: 11375},
								name: "ELLIPSIS",
							},
							&ruleRefExpr{
								pos:  position{line: 246, col: 67, offset: 11384},
								name: "RBRACK",
							},
							&ruleRefExpr{
								pos:  position{line: 246, col: 74, offset: 11391},
								name: "ElementType",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 247, col: 51, offset: 11453},
						name: "SliceType",
					},
					&ruleRefExpr{
						pos:  position{line: 248, col: 51, offset: 11513},
						name: "MapType",
					},
					&ruleRefExpr{
						pos:  position{line: 249, col: 51, offset: 11571},
						name: "TypeName",
					},
				},
			},
		},
		{
			name:        "LiteralValue",
			displayName: "\"literal value\"",
			pos:         position{line: 251, col: 1, offset: 11581},
			expr: &seqExpr{
				pos: position{line: 251, col: 51, offset: 11631},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 251, col: 51, offset: 11631},
						name: "LBRACE",
					},
					&zeroOrOneExpr{
						pos: position{line: 251, col: 58, offset: 11638},
						expr: &seqExpr{
							pos: position{line: 251, col: 60, offset: 11640},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 251, col: 60, offset: 11640},
									name: "ElementList",
								},
								&zeroOrOneExpr{
									pos: position{line: 251, col: 72, offset: 11652},
									expr: &ruleRefExpr{
										pos:  position{line: 251, col: 74, offset: 11654},
										name: "COMMA",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 251, col: 86, offset: 11666},
						name: "RBRACE",
					},
				},
			},
		},
		{
			name:        "ElementList",
			displayName: "\"element list\"",
			pos:         position{line: 252, col: 1, offset: 11673},
			expr: &seqExpr{
				pos: position{line: 252, col: 51, offset: 11723},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 252, col: 51, offset: 11723},
						name: "KeyedElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 252, col: 64, offset: 11736},
						expr: &seqExpr{
							pos: position{line: 252, col: 66, offset: 11738},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 252, col: 66, offset: 11738},
									name: "COMMA",
								},
								&ruleRefExpr{
									pos:  position{line: 252, col: 72, offset: 11744},
									name: "KeyedElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name:        "KeyedElement",
			displayName: "\"keyed element\"",
			pos:         position{line: 253, col: 1, offset: 11760},
			expr: &seqExpr{
				pos: position{line: 253, col: 51, offset: 11810},
				exprs: []interface{}{
					&zeroOrOneExpr{
						pos: position{line: 253, col: 51, offset: 11810},
						expr: &seqExpr{
							pos: position{line: 253, col: 53, offset: 11812},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 253, col: 53, offset: 11812},
									name: "Key",
								},
								&ruleRefExpr{
									pos:  position{line: 253, col: 57, offset: 11816},
									name: "COLON",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 253, col: 66, offset: 11825},
						name: "Element",
					},
				},
			},
		},
		{
			name:        "Key",
			displayName: "\"key of element list\"",
			pos:         position{line: 254, col: 1, offset: 11833},
			expr: &choiceExpr{
				pos: position{line: 254, col: 51, offset: 11883},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 254, col: 51, offset: 11883},
						name: "FieldName",
					},
					&ruleRefExpr{
						pos:  position{line: 255, col: 51, offset: 11943},
						name: "Expression",
					},
					&ruleRefExpr{
						pos:  position{line: 256, col: 51, offset: 12004},
						name: "LiteralValue",
					},
				},
			},
		},
		{
			name:        "FieldName",
			displayName: "\"field name\"",
			pos:         position{line: 258, col: 1, offset: 12018},
			expr: &ruleRefExpr{
				pos:  position{line: 258, col: 51, offset: 12068},
				name: "identifier",
			},
		},
		{
			name:        "Element",
			displayName: "\"element of list\"",
			pos:         position{line: 259, col: 1, offset: 12079},
			expr: &choiceExpr{
				pos: position{line: 259, col: 51, offset: 12129},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 259, col: 51, offset: 12129},
						name: "Expression",
					},
					&ruleRefExpr{
						pos:  position{line: 260, col: 51, offset: 12190},
						name: "LiteralValue",
					},
				},
			},
		},
		{
			name:        "FunctionLit",
			displayName: "\"function literal\"",
			pos:         position{line: 264, col: 1, offset: 12250},
			expr: &seqExpr{
				pos: position{line: 264, col: 51, offset: 12300},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 264, col: 51, offset: 12300},
						val:        "func",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 264, col: 58, offset: 12307},
						name: "Signature",
					},
					&ruleRefExpr{
						pos:  position{line: 264, col: 68, offset: 12317},
						name: "FunctionBody",
					},
				},
			},
		},
		{
			name:        "PrimaryExpr",
			displayName: "\"primary expression\"",
			pos:         position{line: 268, col: 1, offset: 12377},
			expr: &choiceExpr{
				pos: position{line: 268, col: 51, offset: 12427},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 268, col: 51, offset: 12427},
						name: "Operand",
					},
					&ruleRefExpr{
						pos:  position{line: 269, col: 51, offset: 12485},
						name: "Conversion",
					},
					&ruleRefExpr{
						pos:  position{line: 270, col: 51, offset: 12546},
						name: "MethodExpr",
					},
					&seqExpr{
						pos: position{line: 271, col: 51, offset: 12607},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 271, col: 51, offset: 12607},
								name: "PrimaryExpr",
							},
							&ruleRefExpr{
								pos:  position{line: 271, col: 63, offset: 12619},
								name: "Selector",
							},
						},
					},
					&seqExpr{
						pos: position{line: 272, col: 51, offset: 12678},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 272, col: 51, offset: 12678},
								name: "PrimaryExpr",
							},
							&ruleRefExpr{
								pos:  position{line: 272, col: 63, offset: 12690},
								name: "Index",
							},
						},
					},
					&seqExpr{
						pos: position{line: 273, col: 51, offset: 12746},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 273, col: 51, offset: 12746},
								name: "PrimaryExpr",
							},
							&ruleRefExpr{
								pos:  position{line: 273, col: 63, offset: 12758},
								name: "Slice",
							},
						},
					},
					&seqExpr{
						pos: position{line: 274, col: 51, offset: 12814},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 274, col: 51, offset: 12814},
								name: "PrimaryExpr",
							},
							&ruleRefExpr{
								pos:  position{line: 274, col: 63, offset: 12826},
								name: "TypeAssertion",
							},
						},
					},
					&seqExpr{
						pos: position{line: 275, col: 51, offset: 12890},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 275, col: 51, offset: 12890},
								name: "PrimaryExpr",
							},
							&ruleRefExpr{
								pos:  position{line: 275, col: 63, offset: 12902},
								name: "Arguments",
							},
						},
					},
				},
			},
		},
		{
			name:        "Selector",
			displayName: "\"selector in expression\"",
			pos:         position{line: 277, col: 1, offset: 12913},
			expr: &seqExpr{
				pos: position{line: 277, col: 51, offset: 12963},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 277, col: 51, offset: 12963},
						name: "DOT",
					},
					&ruleRefExpr{
						pos:  position{line: 277, col: 55, offset: 12967},
						name: "identifier",
					},
				},
			},
		},
		{
			name:        "Index",
			displayName: "\"index in expression\"",
			pos:         position{line: 278, col: 1, offset: 12978},
			expr: &seqExpr{
				pos: position{line: 278, col: 51, offset: 13028},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 278, col: 51, offset: 13028},
						name: "LBRACK",
					},
					&ruleRefExpr{
						pos:  position{line: 278, col: 58, offset: 13035},
						name: "Expression",
					},
					&ruleRefExpr{
						pos:  position{line: 278, col: 69, offset: 13046},
						name: "RBRACK",
					},
				},
			},
		},
		{
			name:        "Slice",
			displayName: "\"slice in expression\"",
			pos:         position{line: 279, col: 1, offset: 13053},
			expr: &choiceExpr{
				pos: position{line: 279, col: 51, offset: 13103},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 279, col: 51, offset: 13103},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 279, col: 51, offset: 13103},
								name: "LBRACK",
							},
							&zeroOrOneExpr{
								pos: position{line: 279, col: 58, offset: 13110},
								expr: &ruleRefExpr{
									pos:  position{line: 279, col: 60, offset: 13112},
									name: "Expression",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 279, col: 74, offset: 13126},
								name: "COLON",
							},
							&zeroOrOneExpr{
								pos: position{line: 279, col: 80, offset: 13132},
								expr: &ruleRefExpr{
									pos:  position{line: 279, col: 82, offset: 13134},
									name: "Expression",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 279, col: 96, offset: 13148},
								name: "RBRACK",
							},
						},
					},
					&seqExpr{
						pos: position{line: 280, col: 51, offset: 13205},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 280, col: 51, offset: 13205},
								name: "LBRACK",
							},
							&zeroOrOneExpr{
								pos: position{line: 280, col: 58, offset: 13212},
								expr: &ruleRefExpr{
									pos:  position{line: 280, col: 60, offset: 13214},
									name: "Expression",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 280, col: 74, offset: 13228},
								name: "COLON",
							},
							&ruleRefExpr{
								pos:  position{line: 280, col: 80, offset: 13234},
								name: "Expression",
							},
							&ruleRefExpr{
								pos:  position{line: 280, col: 91, offset: 13245},
								name: "COLON",
							},
							&ruleRefExpr{
								pos:  position{line: 280, col: 97, offset: 13251},
								name: "Expression",
							},
							&ruleRefExpr{
								pos:  position{line: 280, col: 108, offset: 13262},
								name: "RBRACK",
							},
						},
					},
				},
			},
		},
		{
			name:        "TypeAssertion",
			displayName: "\"type assertion\"",
			pos:         position{line: 282, col: 1, offset: 13270},
			expr: &seqExpr{
				pos: position{line: 282, col: 51, offset: 13320},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 282, col: 51, offset: 13320},
						name: "DOT",
					},
					&ruleRefExpr{
						pos:  position{line: 282, col: 55, offset: 13324},
						name: "LPAREN",
					},
					&ruleRefExpr{
						pos:  position{line: 282, col: 62, offset: 13331},
						name: "Type",
					},
					&ruleRefExpr{
						pos:  position{line: 282, col: 67, offset: 13336},
						name: "RPAREN",
					},
				},
			},
		},
		{
			name:        "Arguments",
			displayName: "\"arguments\"",
			pos:         position{line: 283, col: 1, offset: 13343},
			expr: &seqExpr{
				pos: position{line: 283, col: 51, offset: 13393},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 283, col: 51, offset: 13393},
						name: "LPAREN",
					},
					&zeroOrOneExpr{
						pos: position{line: 283, col: 58, offset: 13400},
						expr: &seqExpr{
							pos: position{line: 283, col: 60, offset: 13402},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 283, col: 62, offset: 13404},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 283, col: 62, offset: 13404},
											name: "ExpressionList",
										},
										&seqExpr{
											pos: position{line: 283, col: 79, offset: 13421},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 283, col: 79, offset: 13421},
													name: "Type",
												},
												&zeroOrOneExpr{
													pos: position{line: 283, col: 84, offset: 13426},
													expr: &seqExpr{
														pos: position{line: 283, col: 86, offset: 13428},
														exprs: []interface{}{
															&ruleRefExpr{
																pos:  position{line: 283, col: 86, offset: 13428},
																name: "COMMA",
															},
															&ruleRefExpr{
																pos:  position{line: 283, col: 92, offset: 13434},
																name: "ExpressionList",
															},
														},
													},
												},
											},
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 283, col: 112, offset: 13454},
									expr: &ruleRefExpr{
										pos:  position{line: 283, col: 114, offset: 13456},
										name: "ELLIPSIS",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 283, col: 126, offset: 13468},
									expr: &ruleRefExpr{
										pos:  position{line: 283, col: 128, offset: 13470},
										name: "COMMA",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 283, col: 140, offset: 13482},
						name: "RPAREN",
					},
				},
			},
		},
		{
			name:        "MethodExpr",
			displayName: "\"method expression\"",
			pos:         position{line: 287, col: 1, offset: 13535},
			expr: &seqExpr{
				pos: position{line: 287, col: 51, offset: 13585},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 287, col: 51, offset: 13585},
						name: "ReceiverType",
					},
					&ruleRefExpr{
						pos:  position{line: 287, col: 64, offset: 13598},
						name: "DOT",
					},
					&ruleRefExpr{
						pos:  position{line: 287, col: 68, offset: 13602},
						name: "MethodName",
					},
				},
			},
		},
		{
			name:        "ReceiverType",
			displayName: "\"receiver type\"",
			pos:         position{line: 288, col: 1, offset: 13613},
			expr: &ruleRefExpr{
				pos:  position{line: 288, col: 51, offset: 13663},
				name: "Type",
			},
		},
		{
			name:        "Expression",
			displayName: "\"expression\"",
			pos:         position{line: 299, col: 1, offset: 13907},
			expr: &choiceExpr{
				pos: position{line: 299, col: 51, offset: 13957},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 299, col: 51, offset: 13957},
						name: "UnaryExpr",
					},
					&seqExpr{
						pos: position{line: 300, col: 51, offset: 14017},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 300, col: 51, offset: 14017},
								name: "Expression",
							},
							&ruleRefExpr{
								pos:  position{line: 300, col: 62, offset: 14028},
								name: "binary_op",
							},
							&ruleRefExpr{
								pos:  position{line: 300, col: 72, offset: 14038},
								name: "Expression",
							},
						},
					},
				},
			},
		},
		{
			name:        "UnaryExpr",
			displayName: "\"unary expression\"",
			pos:         position{line: 302, col: 1, offset: 14050},
			expr: &choiceExpr{
				pos: position{line: 302, col: 51, offset: 14100},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 302, col: 51, offset: 14100},
						name: "PrimaryExpr",
					},
					&seqExpr{
						pos: position{line: 303, col: 51, offset: 14162},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 303, col: 51, offset: 14162},
								name: "unary_op",
							},
							&ruleRefExpr{
								pos:  position{line: 303, col: 60, offset: 14171},
								name: "UnaryExpr",
							},
						},
					},
				},
			},
		},
		{
			name:        "unary_op",
			displayName: "\"unary operator\"",
			pos:         position{line: 305, col: 1, offset: 14182},
			expr: &choiceExpr{
				pos: position{line: 305, col: 51, offset: 14232},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 305, col: 51, offset: 14232},
						name: "PLUS",
					},
					&ruleRefExpr{
						pos:  position{line: 306, col: 51, offset: 14303},
						name: "MINUS",
					},
					&ruleRefExpr{
						pos:  position{line: 307, col: 51, offset: 14374},
						name: "NOT",
					},
					&ruleRefExpr{
						pos:  position{line: 308, col: 51, offset: 14445},
						name: "NEG",
					},
					&ruleRefExpr{
						pos:  position{line: 309, col: 51, offset: 14516},
						name: "ADDR",
					},
					&ruleRefExpr{
						pos:  position{line: 310, col: 51, offset: 14587},
						name: "REFR",
					},
					&ruleRefExpr{
						pos:  position{line: 311, col: 51, offset: 14658},
						name: "ARROW",
					},
				},
			},
		},
		{
			name:        "binary_op",
			displayName: "\"binary operator\"",
			pos:         position{line: 313, col: 1, offset: 14681},
			expr: &choiceExpr{
				pos: position{line: 313, col: 51, offset: 14731},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 313, col: 51, offset: 14731},
						name: "mul_op",
					},
					&ruleRefExpr{
						pos:  position{line: 314, col: 51, offset: 14788},
						name: "add_op",
					},
					&ruleRefExpr{
						pos:  position{line: 315, col: 51, offset: 14845},
						name: "rel_op",
					},
					&ruleRefExpr{
						pos:  position{line: 316, col: 51, offset: 14902},
						name: "LAND",
					},
					&ruleRefExpr{
						pos:  position{line: 317, col: 51, offset: 14974},
						name: "LOR",
					},
				},
			},
		},
		{
			name:        "rel_op",
			displayName: "\"comparison operator\"",
			pos:         position{line: 319, col: 1, offset: 14997},
			expr: &choiceExpr{
				pos: position{line: 319, col: 51, offset: 15047},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 319, col: 51, offset: 15047},
						name: "EQL",
					},
					&ruleRefExpr{
						pos:  position{line: 320, col: 51, offset: 15119},
						name: "NEQ",
					},
					&ruleRefExpr{
						pos:  position{line: 321, col: 51, offset: 15191},
						name: "LSS",
					},
					&ruleRefExpr{
						pos:  position{line: 322, col: 51, offset: 15262},
						name: "LEQ",
					},
					&ruleRefExpr{
						pos:  position{line: 323, col: 51, offset: 15334},
						name: "GTR",
					},
					&ruleRefExpr{
						pos:  position{line: 324, col: 51, offset: 15405},
						name: "GEQ",
					},
				},
			},
		},
		{
			name:        "add_op",
			displayName: "\"addition operator\"",
			pos:         position{line: 326, col: 1, offset: 15428},
			expr: &choiceExpr{
				pos: position{line: 326, col: 51, offset: 15478},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 326, col: 51, offset: 15478},
						name: "ADD",
					},
					&ruleRefExpr{
						pos:  position{line: 327, col: 51, offset: 15549},
						name: "SUB",
					},
					&ruleRefExpr{
						pos:  position{line: 328, col: 51, offset: 15620},
						name: "OR",
					},
					&ruleRefExpr{
						pos:  position{line: 329, col: 51, offset: 15691},
						name: "XOR",
					},
				},
			},
		},
		{
			name:        "mul_op",
			displayName: "\"multiplication operator\"",
			pos:         position{line: 331, col: 1, offset: 15713},
			expr: &choiceExpr{
				pos: position{line: 331, col: 51, offset: 15763},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 331, col: 51, offset: 15763},
						name: "MUL",
					},
					&ruleRefExpr{
						pos:  position{line: 332, col: 51, offset: 15834},
						name: "QUO",
					},
					&ruleRefExpr{
						pos:  position{line: 333, col: 51, offset: 15905},
						name: "REM",
					},
					&ruleRefExpr{
						pos:  position{line: 334, col: 51, offset: 15976},
						name: "SHL",
					},
					&ruleRefExpr{
						pos:  position{line: 335, col: 51, offset: 16048},
						name: "SHR",
					},
					&ruleRefExpr{
						pos:  position{line: 336, col: 51, offset: 16120},
						name: "AND",
					},
					&ruleRefExpr{
						pos:  position{line: 337, col: 51, offset: 16191},
						name: "AND_NOT",
					},
				},
			},
		},
		{
			name:        "Conversion",
			displayName: "\"type conversion\"",
			pos:         position{line: 341, col: 1, offset: 16259},
			expr: &seqExpr{
				pos: position{line: 341, col: 51, offset: 16309},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 341, col: 51, offset: 16309},
						name: "Type",
					},
					&ruleRefExpr{
						pos:  position{line: 341, col: 56, offset: 16314},
						name: "LPAREN",
					},
					&ruleRefExpr{
						pos:  position{line: 341, col: 63, offset: 16321},
						name: "Expression",
					},
					&zeroOrOneExpr{
						pos: position{line: 341, col: 74, offset: 16332},
						expr: &ruleRefExpr{
							pos:  position{line: 341, col: 76, offset: 16334},
							name: "COMMA",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 341, col: 85, offset: 16343},
						name: "RPAREN",
					},
				},
			},
		},
		{
			name:        "Statement",
			displayName: "\"statement\"",
			pos:         position{line: 345, col: 1, offset: 16396},
			expr: &choiceExpr{
				pos: position{line: 345, col: 51, offset: 16446},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 345, col: 51, offset: 16446},
						name: "Declaration",
					},
					&ruleRefExpr{
						pos:  position{line: 346, col: 51, offset: 16508},
						name: "LabeledStmt",
					},
					&ruleRefExpr{
						pos:  position{line: 347, col: 51, offset: 16570},
						name: "SimpleStm",
					},
					&ruleRefExpr{
						pos:  position{line: 348, col: 51, offset: 16630},
						name: "GoStmt",
					},
					&ruleRefExpr{
						pos:  position{line: 349, col: 51, offset: 16687},
						name: "ReturnStmt",
					},
					&ruleRefExpr{
						pos:  position{line: 350, col: 51, offset: 16748},
						name: "BreakStmt",
					},
					&ruleRefExpr{
						pos:  position{line: 351, col: 51, offset: 16808},
						name: "ContinueStmt",
					},
					&ruleRefExpr{
						pos:  position{line: 352, col: 51, offset: 16871},
						name: "GotoStm",
					},
					&ruleRefExpr{
						pos:  position{line: 353, col: 51, offset: 16929},
						name: "FallthroughStmt",
					},
					&ruleRefExpr{
						pos:  position{line: 354, col: 51, offset: 16995},
						name: "Block",
					},
					&ruleRefExpr{
						pos:  position{line: 355, col: 51, offset: 17051},
						name: "IfStmt",
					},
					&ruleRefExpr{
						pos:  position{line: 356, col: 51, offset: 17108},
						name: "SwitchStmt",
					},
					&ruleRefExpr{
						pos:  position{line: 357, col: 51, offset: 17169},
						name: "SelectStmt",
					},
					&ruleRefExpr{
						pos:  position{line: 358, col: 51, offset: 17230},
						name: "ForStm",
					},
					&ruleRefExpr{
						pos:  position{line: 359, col: 51, offset: 17287},
						name: "DeferStmt",
					},
				},
			},
		},
		{
			name:        "SimpleStmt",
			displayName: "\"simple statement\"",
			pos:         position{line: 361, col: 1, offset: 17298},
			expr: &choiceExpr{
				pos: position{line: 361, col: 51, offset: 17348},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 361, col: 51, offset: 17348},
						name: "EmptyStmt",
					},
					&ruleRefExpr{
						pos:  position{line: 362, col: 51, offset: 17408},
						name: "ExpressionStmt",
					},
					&ruleRefExpr{
						pos:  position{line: 363, col: 51, offset: 17473},
						name: "SendStmt",
					},
					&ruleRefExpr{
						pos:  position{line: 364, col: 51, offset: 17532},
						name: "IncDecStmt",
					},
					&ruleRefExpr{
						pos:  position{line: 365, col: 51, offset: 17593},
						name: "Assignment",
					},
					&ruleRefExpr{
						pos:  position{line: 366, col: 51, offset: 17654},
						name: "ShortVarDecl",
					},
				},
			},
		},
		{
			name:        "EmptyStmt",
			displayName: "\"empty statement\"",
			pos:         position{line: 370, col: 1, offset: 17713},
			expr: &litMatcher{
				pos:        position{line: 370, col: 51, offset: 17763},
				val:        "",
				ignoreCase: false,
			},
		},
		{
			name:        "LabeledStmt",
			displayName: "\"labeled statement\"",
			pos:         position{line: 374, col: 1, offset: 17812},
			expr: &seqExpr{
				pos: position{line: 374, col: 51, offset: 17862},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 374, col: 51, offset: 17862},
						name: "Label",
					},
					&ruleRefExpr{
						pos:  position{line: 374, col: 57, offset: 17868},
						name: "COLON",
					},
					&ruleRefExpr{
						pos:  position{line: 374, col: 63, offset: 17874},
						name: "Statement",
					},
				},
			},
		},
		{
			name:        "Label",
			displayName: "\"label\"",
			pos:         position{line: 375, col: 1, offset: 17884},
			expr: &ruleRefExpr{
				pos:  position{line: 375, col: 51, offset: 17934},
				name: "identifier",
			},
		},
		{
			name:        "ExpressionStmt",
			displayName: "\"expression statement\"",
			pos:         position{line: 379, col: 1, offset: 17991},
			expr: &ruleRefExpr{
				pos:  position{line: 379, col: 51, offset: 18041},
				name: "Expression",
			},
		},
		{
			name:        "SendStmt",
			displayName: "\"send-statement\"",
			pos:         position{line: 383, col: 1, offset: 18098},
			expr: &seqExpr{
				pos: position{line: 383, col: 51, offset: 18148},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 383, col: 51, offset: 18148},
						name: "Channel",
					},
					&ruleRefExpr{
						pos:  position{line: 383, col: 59, offset: 18156},
						name: "ARROW",
					},
					&ruleRefExpr{
						pos:  position{line: 383, col: 65, offset: 18162},
						name: "Expression",
					},
				},
			},
		},
		{
			name:        "Channel",
			displayName: "\"channel\"",
			pos:         position{line: 384, col: 1, offset: 18173},
			expr: &ruleRefExpr{
				pos:  position{line: 384, col: 51, offset: 18223},
				name: "Expression",
			},
		},
		{
			name:        "IncDecStmt",
			displayName: "\"increment/decrement statement\"",
			pos:         position{line: 388, col: 1, offset: 18280},
			expr: &seqExpr{
				pos: position{line: 388, col: 51, offset: 18330},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 388, col: 51, offset: 18330},
						name: "Expression",
					},
					&choiceExpr{
						pos: position{line: 388, col: 64, offset: 18343},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 388, col: 64, offset: 18343},
								name: "INC",
							},
							&ruleRefExpr{
								pos:  position{line: 388, col: 70, offset: 18349},
								name: "DEC",
							},
						},
					},
				},
			},
		},
		{
			name:        "Assignment",
			displayName: "\"assignment\"",
			pos:         position{line: 392, col: 1, offset: 18401},
			expr: &seqExpr{
				pos: position{line: 392, col: 51, offset: 18451},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 392, col: 51, offset: 18451},
						name: "ExpressionList",
					},
					&ruleRefExpr{
						pos:  position{line: 392, col: 66, offset: 18466},
						name: "assign_op",
					},
					&ruleRefExpr{
						pos:  position{line: 392, col: 76, offset: 18476},
						name: "ExpressionList",
					},
				},
			},
		},
		{
			name:        "assign_op",
			displayName: "\"assignment operator\"",
			pos:         position{line: 394, col: 1, offset: 18492},
			expr: &seqExpr{
				pos: position{line: 394, col: 51, offset: 18542},
				exprs: []interface{}{
					&zeroOrOneExpr{
						pos: position{line: 394, col: 51, offset: 18542},
						expr: &choiceExpr{
							pos: position{line: 394, col: 53, offset: 18544},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 394, col: 53, offset: 18544},
									name: "add_op",
								},
								&ruleRefExpr{
									pos:  position{line: 394, col: 62, offset: 18553},
									name: "mul_op",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 394, col: 72, offset: 18563},
						name: "EQUAL",
					},
				},
			},
		},
		{
			name:        "IfStmt",
			displayName: "\"'if' statement\"",
			pos:         position{line: 398, col: 1, offset: 18615},
			expr: &seqExpr{
				pos: position{line: 398, col: 29, offset: 18643},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 398, col: 29, offset: 18643},
						val:        "if",
						ignoreCase: false,
					},
					&zeroOrOneExpr{
						pos: position{line: 398, col: 34, offset: 18648},
						expr: &seqExpr{
							pos: position{line: 398, col: 36, offset: 18650},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 398, col: 36, offset: 18650},
									name: "SimpleStmt",
								},
								&ruleRefExpr{
									pos:  position{line: 398, col: 47, offset: 18661},
									name: "SEMICOLON",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 398, col: 60, offset: 18674},
						name: "Expression",
					},
					&ruleRefExpr{
						pos:  position{line: 398, col: 71, offset: 18685},
						name: "Block",
					},
					&zeroOrOneExpr{
						pos: position{line: 398, col: 77, offset: 18691},
						expr: &seqExpr{
							pos: position{line: 398, col: 79, offset: 18693},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 398, col: 79, offset: 18693},
									val:        "else",
									ignoreCase: false,
								},
								&choiceExpr{
									pos: position{line: 398, col: 88, offset: 18702},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 398, col: 88, offset: 18702},
											name: "IfStmt",
										},
										&ruleRefExpr{
											pos:  position{line: 398, col: 97, offset: 18711},
											name: "Block",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name:        "SwitchStmt",
			displayName: "\"'switch' statement\"",
			pos:         position{line: 402, col: 1, offset: 18768},
			expr: &choiceExpr{
				pos: position{line: 402, col: 51, offset: 18818},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 402, col: 51, offset: 18818},
						name: "ExprSwitchStmt",
					},
					&ruleRefExpr{
						pos:  position{line: 403, col: 51, offset: 18883},
						name: "TypeSwitchStmt",
					},
				},
			},
		},
		{
			name:        "ExprSwitchStmt",
			displayName: "\"expression of 'switch' statement\"",
			pos:         position{line: 407, col: 1, offset: 18944},
			expr: &seqExpr{
				pos: position{line: 407, col: 55, offset: 18998},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 407, col: 55, offset: 18998},
						val:        "switch",
						ignoreCase: false,
					},
					&zeroOrOneExpr{
						pos: position{line: 407, col: 64, offset: 19007},
						expr: &seqExpr{
							pos: position{line: 407, col: 66, offset: 19009},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 407, col: 66, offset: 19009},
									name: "SimpleStmt",
								},
								&ruleRefExpr{
									pos:  position{line: 407, col: 77, offset: 19020},
									name: "SEMICOLON",
								},
							},
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 407, col: 90, offset: 19033},
						expr: &ruleRefExpr{
							pos:  position{line: 407, col: 92, offset: 19035},
							name: "Expression",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 407, col: 106, offset: 19049},
						name: "LBRACE",
					},
					&zeroOrMoreExpr{
						pos: position{line: 407, col: 113, offset: 19056},
						expr: &ruleRefExpr{
							pos:  position{line: 407, col: 115, offset: 19058},
							name: "ExprCaseClause",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 407, col: 133, offset: 19076},
						name: "RBRACE",
					},
				},
			},
		},
		{
			name:        "ExprCaseClause",
			displayName: "\"expression of 'case' clause\"",
			pos:         position{line: 408, col: 1, offset: 19083},
			expr: &seqExpr{
				pos: position{line: 408, col: 55, offset: 19137},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 408, col: 55, offset: 19137},
						name: "ExprSwitchCase",
					},
					&ruleRefExpr{
						pos:  position{line: 408, col: 70, offset: 19152},
						name: "COLON",
					},
					&ruleRefExpr{
						pos:  position{line: 408, col: 76, offset: 19158},
						name: "StatementList",
					},
				},
			},
		},
		{
			name:        "ExprSwitchCase",
			displayName: "\"expression of switch's 'case'\"",
			pos:         position{line: 409, col: 1, offset: 19172},
			expr: &choiceExpr{
				pos: position{line: 409, col: 55, offset: 19226},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 409, col: 55, offset: 19226},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 409, col: 55, offset: 19226},
								val:        "case",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 409, col: 62, offset: 19233},
								name: "ExpressionList",
							},
						},
					},
					&litMatcher{
						pos:        position{line: 410, col: 55, offset: 19302},
						val:        "default",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name:        "TypeSwitchStmt",
			displayName: "\"type-switch statement\"",
			pos:         position{line: 414, col: 1, offset: 19359},
			expr: &seqExpr{
				pos: position{line: 414, col: 51, offset: 19409},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 414, col: 51, offset: 19409},
						val:        "switch",
						ignoreCase: false,
					},
					&zeroOrOneExpr{
						pos: position{line: 414, col: 60, offset: 19418},
						expr: &seqExpr{
							pos: position{line: 414, col: 62, offset: 19420},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 414, col: 62, offset: 19420},
									name: "SimpleStmt",
								},
								&ruleRefExpr{
									pos:  position{line: 414, col: 73, offset: 19431},
									name: "SEMICOLON",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 414, col: 86, offset: 19444},
						name: "TypeSwitchGuard",
					},
					&ruleRefExpr{
						pos:  position{line: 414, col: 102, offset: 19460},
						name: "LBRACE",
					},
					&zeroOrMoreExpr{
						pos: position{line: 414, col: 109, offset: 19467},
						expr: &ruleRefExpr{
							pos:  position{line: 414, col: 111, offset: 19469},
							name: "TypeCaseClause",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 414, col: 129, offset: 19487},
						name: "RBRACE",
					},
				},
			},
		},
		{
			name:        "TypeSwitchGuard",
			displayName: "\"type-switch guard\"",
			pos:         position{line: 415, col: 1, offset: 19494},
			expr: &seqExpr{
				pos: position{line: 415, col: 51, offset: 19544},
				exprs: []interface{}{
					&seqExpr{
						pos: position{line: 415, col: 53, offset: 19546},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 415, col: 53, offset: 19546},
								name: "identifier",
							},
							&ruleRefExpr{
								pos:  position{line: 415, col: 64, offset: 19557},
								name: "DEFINE",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 415, col: 73, offset: 19566},
						name: "PrimaryExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 415, col: 85, offset: 19578},
						name: "DOT",
					},
					&ruleRefExpr{
						pos:  position{line: 415, col: 89, offset: 19582},
						name: "LPAREN",
					},
					&litMatcher{
						pos:        position{line: 415, col: 96, offset: 19589},
						val:        "type",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 415, col: 103, offset: 19596},
						name: "RPAREN",
					},
				},
			},
		},
		{
			name:        "TypeCaseClause",
			displayName: "\"type-switch clause\"",
			pos:         position{line: 416, col: 1, offset: 19603},
			expr: &seqExpr{
				pos: position{line: 416, col: 51, offset: 19653},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 416, col: 51, offset: 19653},
						name: "TypeSwitchCase",
					},
					&ruleRefExpr{
						pos:  position{line: 416, col: 66, offset: 19668},
						name: "COLON",
					},
					&ruleRefExpr{
						pos:  position{line: 416, col: 72, offset: 19674},
						name: "StatementList",
					},
				},
			},
		},
		{
			name:        "TypeSwitchCase",
			displayName: "\"type-switch case\"",
			pos:         position{line: 417, col: 1, offset: 19688},
			expr: &choiceExpr{
				pos: position{line: 417, col: 51, offset: 19738},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 417, col: 51, offset: 19738},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 417, col: 51, offset: 19738},
								val:        "case",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 417, col: 58, offset: 19745},
								name: "TypeList",
							},
						},
					},
					&litMatcher{
						pos:        position{line: 418, col: 51, offset: 19804},
						val:        "default",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name:        "TypeList",
			displayName: "\"type list\"",
			pos:         position{line: 420, col: 1, offset: 19815},
			expr: &seqExpr{
				pos: position{line: 420, col: 51, offset: 19865},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 420, col: 51, offset: 19865},
						name: "Type",
					},
					&zeroOrMoreExpr{
						pos: position{line: 420, col: 56, offset: 19870},
						expr: &seqExpr{
							pos: position{line: 420, col: 58, offset: 19872},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 420, col: 58, offset: 19872},
									name: "COMMA",
								},
								&ruleRefExpr{
									pos:  position{line: 420, col: 64, offset: 19878},
									name: "Type",
								},
							},
						},
					},
				},
			},
		},
		{
			name:        "ForStmt",
			displayName: "\"'for' statement\"",
			pos:         position{line: 424, col: 1, offset: 19933},
			expr: &seqExpr{
				pos: position{line: 424, col: 51, offset: 19983},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 424, col: 51, offset: 19983},
						val:        "for",
						ignoreCase: false,
					},
					&choiceExpr{
						pos: position{line: 424, col: 59, offset: 19991},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 424, col: 59, offset: 19991},
								name: "Condition",
							},
							&ruleRefExpr{
								pos:  position{line: 424, col: 71, offset: 20003},
								name: "ForClause",
							},
							&ruleRefExpr{
								pos:  position{line: 424, col: 83, offset: 20015},
								name: "RangeClause",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 424, col: 97, offset: 20029},
						name: "Block",
					},
				},
			},
		},
		{
			name:        "Condition",
			displayName: "\"'for' condition\"",
			pos:         position{line: 425, col: 1, offset: 20035},
			expr: &ruleRefExpr{
				pos:  position{line: 425, col: 51, offset: 20085},
				name: "Expression",
			},
		},
		{
			name:        "ForClause",
			displayName: "\"'for' clause\"",
			pos:         position{line: 429, col: 1, offset: 20143},
			expr: &seqExpr{
				pos: position{line: 429, col: 51, offset: 20193},
				exprs: []interface{}{
					&zeroOrOneExpr{
						pos: position{line: 429, col: 51, offset: 20193},
						expr: &ruleRefExpr{
							pos:  position{line: 429, col: 53, offset: 20195},
							name: "InitStmt",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 429, col: 65, offset: 20207},
						name: "SEMICOLON",
					},
					&zeroOrOneExpr{
						pos: position{line: 429, col: 75, offset: 20217},
						expr: &ruleRefExpr{
							pos:  position{line: 429, col: 77, offset: 20219},
							name: "Condition",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 429, col: 90, offset: 20232},
						name: "SEMICOLON",
					},
					&zeroOrOneExpr{
						pos: position{line: 429, col: 100, offset: 20242},
						expr: &ruleRefExpr{
							pos:  position{line: 429, col: 102, offset: 20244},
							name: "PostStmt",
						},
					},
				},
			},
		},
		{
			name:        "InitStmt",
			displayName: "\"initial statament in 'for'\"",
			pos:         position{line: 430, col: 1, offset: 20256},
			expr: &ruleRefExpr{
				pos:  position{line: 430, col: 51, offset: 20306},
				name: "SimpleStmt",
			},
		},
		{
			name:        "PostStmt",
			displayName: "\"post statement in 'for'\"",
			pos:         position{line: 431, col: 1, offset: 20317},
			expr: &ruleRefExpr{
				pos:  position{line: 431, col: 51, offset: 20367},
				name: "SimpleStmt",
			},
		},
		{
			name:        "RangeClause",
			displayName: "\"'range' clause\"",
			pos:         position{line: 435, col: 1, offset: 20425},
			expr: &seqExpr{
				pos: position{line: 435, col: 51, offset: 20475},
				exprs: []interface{}{
					&zeroOrOneExpr{
						pos: position{line: 435, col: 51, offset: 20475},
						expr: &choiceExpr{
							pos: position{line: 435, col: 53, offset: 20477},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 435, col: 53, offset: 20477},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 435, col: 53, offset: 20477},
											name: "ExpressionList",
										},
										&ruleRefExpr{
											pos:  position{line: 435, col: 68, offset: 20492},
											name: "EQUAL",
										},
									},
								},
								&seqExpr{
									pos: position{line: 435, col: 76, offset: 20500},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 435, col: 76, offset: 20500},
											name: "IdentifierList",
										},
										&ruleRefExpr{
											pos:  position{line: 435, col: 91, offset: 20515},
											name: "DEFINE",
										},
									},
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 435, col: 101, offset: 20525},
						val:        "range",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 435, col: 109, offset: 20533},
						name: "Expression",
					},
				},
			},
		},
		{
			name:        "GoStmt",
			displayName: "\"'go' statement\"",
			pos:         position{line: 439, col: 1, offset: 20591},
			expr: &seqExpr{
				pos: position{line: 439, col: 51, offset: 20641},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 439, col: 51, offset: 20641},
						val:        "go",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 439, col: 56, offset: 20646},
						name: "Expression",
					},
				},
			},
		},
		{
			name:        "SelectStmt",
			displayName: "\"'select' statement\"",
			pos:         position{line: 443, col: 1, offset: 20704},
			expr: &seqExpr{
				pos: position{line: 443, col: 51, offset: 20754},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 443, col: 51, offset: 20754},
						val:        "select",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 443, col: 60, offset: 20763},
						name: "LBRACE",
					},
					&zeroOrMoreExpr{
						pos: position{line: 443, col: 67, offset: 20770},
						expr: &ruleRefExpr{
							pos:  position{line: 443, col: 69, offset: 20772},
							name: "CommClause",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 443, col: 83, offset: 20786},
						name: "RBRACE",
					},
				},
			},
		},
		{
			name:        "CommClause",
			displayName: "\"communication-clause\"",
			pos:         position{line: 444, col: 1, offset: 20793},
			expr: &seqExpr{
				pos: position{line: 444, col: 51, offset: 20843},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 444, col: 51, offset: 20843},
						name: "CommCase",
					},
					&ruleRefExpr{
						pos:  position{line: 444, col: 60, offset: 20852},
						name: "COLON",
					},
					&ruleRefExpr{
						pos:  position{line: 444, col: 66, offset: 20858},
						name: "StatementList",
					},
				},
			},
		},
		{
			name:        "CommCase",
			displayName: "\"comminucation 'case'\"",
			pos:         position{line: 445, col: 1, offset: 20872},
			expr: &choiceExpr{
				pos: position{line: 445, col: 51, offset: 20922},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 445, col: 51, offset: 20922},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 445, col: 51, offset: 20922},
								val:        "case",
								ignoreCase: false,
							},
							&choiceExpr{
								pos: position{line: 445, col: 60, offset: 20931},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 445, col: 60, offset: 20931},
										name: "SendStmt",
									},
									&ruleRefExpr{
										pos:  position{line: 445, col: 71, offset: 20942},
										name: "RecvStmt",
									},
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 446, col: 51, offset: 21003},
						val:        "default",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name:        "RecvStmt",
			displayName: "\"receive-statement\"",
			pos:         position{line: 448, col: 1, offset: 21014},
			expr: &seqExpr{
				pos: position{line: 448, col: 51, offset: 21064},
				exprs: []interface{}{
					&zeroOrOneExpr{
						pos: position{line: 448, col: 51, offset: 21064},
						expr: &choiceExpr{
							pos: position{line: 448, col: 53, offset: 21066},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 448, col: 53, offset: 21066},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 448, col: 53, offset: 21066},
											name: "ExpressionList",
										},
										&ruleRefExpr{
											pos:  position{line: 448, col: 68, offset: 21081},
											name: "EQUAL",
										},
									},
								},
								&seqExpr{
									pos: position{line: 448, col: 76, offset: 21089},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 448, col: 76, offset: 21089},
											name: "IdentifierList",
										},
										&ruleRefExpr{
											pos:  position{line: 448, col: 91, offset: 21104},
											name: "DEFINE",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 448, col: 101, offset: 21114},
						name: "RecvExpr",
					},
				},
			},
		},
		{
			name:        "RecvExpr",
			displayName: "\"receive-expression\"",
			pos:         position{line: 449, col: 1, offset: 21123},
			expr: &ruleRefExpr{
				pos:  position{line: 449, col: 51, offset: 21173},
				name: "Expression",
			},
		},
		{
			name:        "ReturnStmt",
			displayName: "\"'return' statement\"",
			pos:         position{line: 453, col: 1, offset: 21231},
			expr: &seqExpr{
				pos: position{line: 453, col: 51, offset: 21281},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 453, col: 51, offset: 21281},
						val:        "return",
						ignoreCase: false,
					},
					&zeroOrOneExpr{
						pos: position{line: 453, col: 60, offset: 21290},
						expr: &ruleRefExpr{
							pos:  position{line: 453, col: 62, offset: 21292},
							name: "ExpressionList",
						},
					},
				},
			},
		},
		{
			name:        "BreakStmt",
			displayName: "\"'break' statement\"",
			pos:         position{line: 457, col: 1, offset: 21357},
			expr: &seqExpr{
				pos: position{line: 457, col: 51, offset: 21407},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 457, col: 51, offset: 21407},
						val:        "break",
						ignoreCase: false,
					},
					&zeroOrOneExpr{
						pos: position{line: 457, col: 59, offset: 21415},
						expr: &ruleRefExpr{
							pos:  position{line: 457, col: 61, offset: 21417},
							name: "Label",
						},
					},
				},
			},
		},
		{
			name:        "ContinueStmt",
			displayName: "\"'continue' statement\"",
			pos:         position{line: 461, col: 1, offset: 21473},
			expr: &seqExpr{
				pos: position{line: 461, col: 51, offset: 21523},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 461, col: 51, offset: 21523},
						val:        "continue",
						ignoreCase: false,
					},
					&zeroOrOneExpr{
						pos: position{line: 461, col: 62, offset: 21534},
						expr: &ruleRefExpr{
							pos:  position{line: 461, col: 64, offset: 21536},
							name: "Label",
						},
					},
				},
			},
		},
		{
			name:        "GotoStmt",
			displayName: "\"'goto' statement\"",
			pos:         position{line: 465, col: 1, offset: 21592},
			expr: &seqExpr{
				pos: position{line: 465, col: 51, offset: 21642},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 465, col: 51, offset: 21642},
						val:        "goto",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 465, col: 58, offset: 21649},
						name: "Label",
					},
				},
			},
		},
		{
			name:        "FallthroughStmt",
			displayName: "\"'fallthrough' statement\"",
			pos:         position{line: 469, col: 1, offset: 21702},
			expr: &litMatcher{
				pos:        position{line: 469, col: 51, offset: 21752},
				val:        "fallthrough",
				ignoreCase: false,
			},
		},
		{
			name:        "DeferStmt",
			displayName: "\"'defer' statement\"",
			pos:         position{line: 473, col: 1, offset: 21813},
			expr: &seqExpr{
				pos: position{line: 473, col: 51, offset: 21863},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 473, col: 51, offset: 21863},
						val:        "defer",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 473, col: 59, offset: 21871},
						name: "Expression",
					},
				},
			},
		},
		{
			name:        "SourceFile",
			displayName: "\"source file organization\"",
			pos:         position{line: 477, col: 1, offset: 21929},
			expr: &seqExpr{
				pos: position{line: 477, col: 51, offset: 21979},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 477, col: 51, offset: 21979},
						name: "PackageClause",
					},
					&ruleRefExpr{
						pos:  position{line: 477, col: 65, offset: 21993},
						name: "SEMICOLON",
					},
					&zeroOrMoreExpr{
						pos: position{line: 477, col: 75, offset: 22003},
						expr: &seqExpr{
							pos: position{line: 477, col: 77, offset: 22005},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 477, col: 77, offset: 22005},
									name: "ImportDecl",
								},
								&ruleRefExpr{
									pos:  position{line: 477, col: 88, offset: 22016},
									name: "SEMICOLON",
								},
							},
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 477, col: 101, offset: 22029},
						expr: &seqExpr{
							pos: position{line: 477, col: 103, offset: 22031},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 477, col: 103, offset: 22031},
									name: "TopLevelDecl",
								},
								&ruleRefExpr{
									pos:  position{line: 477, col: 116, offset: 22044},
									name: "SEMICOLON",
								},
							},
						},
					},
				},
			},
		},
		{
			name:        "PackageClause",
			displayName: "\"'package' clause\"",
			pos:         position{line: 481, col: 1, offset: 22104},
			expr: &seqExpr{
				pos: position{line: 481, col: 51, offset: 22154},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 481, col: 51, offset: 22154},
						val:        "package",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 481, col: 61, offset: 22164},
						name: "PackageName",
					},
				},
			},
		},
		{
			name:        "PackageName",
			displayName: "\"package name\"",
			pos:         position{line: 482, col: 1, offset: 22176},
			expr: &ruleRefExpr{
				pos:  position{line: 482, col: 51, offset: 22226},
				name: "identifier",
			},
		},
		{
			name:        "ImportDecl",
			displayName: "\"'import' declaration\"",
			pos:         position{line: 486, col: 1, offset: 22284},
			expr: &seqExpr{
				pos: position{line: 486, col: 51, offset: 22334},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 486, col: 51, offset: 22334},
						val:        "import",
						ignoreCase: false,
					},
					&choiceExpr{
						pos: position{line: 486, col: 62, offset: 22345},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 486, col: 62, offset: 22345},
								name: "ImportSpec",
							},
							&seqExpr{
								pos: position{line: 486, col: 75, offset: 22358},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 486, col: 75, offset: 22358},
										name: "LPAREN",
									},
									&zeroOrMoreExpr{
										pos: position{line: 486, col: 82, offset: 22365},
										expr: &seqExpr{
											pos: position{line: 486, col: 84, offset: 22367},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 486, col: 84, offset: 22367},
													name: "ImportSpec",
												},
												&ruleRefExpr{
													pos:  position{line: 486, col: 95, offset: 22378},
													name: "SEMICOLON",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 486, col: 108, offset: 22391},
										name: "RPAREN",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name:        "ImportSpec",
			displayName: "\"import specification\"",
			pos:         position{line: 487, col: 1, offset: 22400},
			expr: &seqExpr{
				pos: position{line: 487, col: 51, offset: 22450},
				exprs: []interface{}{
					&zeroOrOneExpr{
						pos: position{line: 487, col: 51, offset: 22450},
						expr: &choiceExpr{
							pos: position{line: 487, col: 53, offset: 22452},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 487, col: 53, offset: 22452},
									name: "DOT",
								},
								&ruleRefExpr{
									pos:  position{line: 487, col: 59, offset: 22458},
									name: "PackageName",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 487, col: 74, offset: 22473},
						name: "ImportPath",
					},
				},
			},
		},
		{
			name:        "ImportPath",
			displayName: "\"import path\"",
			pos:         position{line: 488, col: 1, offset: 22484},
			expr: &ruleRefExpr{
				pos:  position{line: 488, col: 51, offset: 22534},
				name: "string_lit",
			},
		},
		{
			name:        "SEMICOLON",
			displayName: "\"semicolon\"",
			pos:         position{line: 496, col: 1, offset: 22733},
			expr: &litMatcher{
				pos:        position{line: 496, col: 51, offset: 22783},
				val:        ";",
				ignoreCase: false,
			},
		},
		{
			name:        "COLON",
			displayName: "\"colon\"",
			pos:         position{line: 497, col: 1, offset: 22787},
			expr: &litMatcher{
				pos:        position{line: 497, col: 51, offset: 22837},
				val:        ":",
				ignoreCase: false,
			},
		},
		{
			name:        "DOT",
			displayName: "\"dot\"",
			pos:         position{line: 498, col: 1, offset: 22841},
			expr: &litMatcher{
				pos:        position{line: 498, col: 51, offset: 22891},
				val:        ".",
				ignoreCase: false,
			},
		},
		{
			name:        "LPAREN",
			displayName: "\"left parenthesis\"",
			pos:         position{line: 500, col: 1, offset: 22896},
			expr: &litMatcher{
				pos:        position{line: 500, col: 51, offset: 22946},
				val:        "(",
				ignoreCase: false,
			},
		},
		{
			name:        "LBRACK",
			displayName: "\"left bracket\"",
			pos:         position{line: 501, col: 1, offset: 22950},
			expr: &litMatcher{
				pos:        position{line: 501, col: 51, offset: 23000},
				val:        "[",
				ignoreCase: false,
			},
		},
		{
			name:        "LBRACE",
			displayName: "\"left brace\"",
			pos:         position{line: 502, col: 1, offset: 23004},
			expr: &litMatcher{
				pos:        position{line: 502, col: 51, offset: 23054},
				val:        "{",
				ignoreCase: false,
			},
		},
		{
			name:        "COMMA",
			displayName: "\"comma\"",
			pos:         position{line: 503, col: 1, offset: 23058},
			expr: &litMatcher{
				pos:        position{line: 503, col: 51, offset: 23108},
				val:        ",",
				ignoreCase: false,
			},
		},
		{
			name:        "PERIOD",
			displayName: "\"period\"",
			pos:         position{line: 504, col: 1, offset: 23112},
			expr: &litMatcher{
				pos:        position{line: 504, col: 51, offset: 23162},
				val:        ".",
				ignoreCase: false,
			},
		},
		{
			name:        "RPAREN",
			displayName: "\"right parenthesis\"",
			pos:         position{line: 506, col: 1, offset: 23167},
			expr: &litMatcher{
				pos:        position{line: 506, col: 51, offset: 23217},
				val:        ")",
				ignoreCase: false,
			},
		},
		{
			name:        "RBRACK",
			displayName: "\"right bracket\"",
			pos:         position{line: 507, col: 1, offset: 23221},
			expr: &litMatcher{
				pos:        position{line: 507, col: 51, offset: 23271},
				val:        "]",
				ignoreCase: false,
			},
		},
		{
			name:        "RBRACE",
			displayName: "\"right brace\"",
			pos:         position{line: 508, col: 1, offset: 23275},
			expr: &litMatcher{
				pos:        position{line: 508, col: 51, offset: 23325},
				val:        "}",
				ignoreCase: false,
			},
		},
		{
			name:        "PLUS",
			displayName: "\"plus\"",
			pos:         position{line: 510, col: 1, offset: 23330},
			expr: &litMatcher{
				pos:        position{line: 510, col: 51, offset: 23380},
				val:        "+",
				ignoreCase: false,
			},
		},
		{
			name:        "MINUS",
			displayName: "\"minus\"",
			pos:         position{line: 511, col: 1, offset: 23384},
			expr: &litMatcher{
				pos:        position{line: 511, col: 51, offset: 23434},
				val:        "-",
				ignoreCase: false,
			},
		},
		{
			name:        "SLASH",
			displayName: "\"slash\"",
			pos:         position{line: 513, col: 1, offset: 23439},
			expr: &litMatcher{
				pos:        position{line: 513, col: 51, offset: 23489},
				val:        "/",
				ignoreCase: false,
			},
		},
		{
			name:        "BSLASH",
			displayName: "\"backslash\"",
			pos:         position{line: 514, col: 1, offset: 23493},
			expr: &charClassMatcher{
				pos:        position{line: 514, col: 51, offset: 23543},
				val:        "[U+005C]",
				chars:      []rune{'U', '+', '0', '0', '5', 'C'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "EQUAL",
			displayName: "\"equal\"",
			pos:         position{line: 516, col: 1, offset: 23565},
			expr: &litMatcher{
				pos:        position{line: 516, col: 51, offset: 23615},
				val:        "=",
				ignoreCase: false,
			},
		},
		{
			name:        "LSS",
			displayName: "\"less than\"",
			pos:         position{line: 517, col: 1, offset: 23619},
			expr: &litMatcher{
				pos:        position{line: 517, col: 51, offset: 23669},
				val:        "<",
				ignoreCase: false,
			},
		},
		{
			name:        "GTR",
			displayName: "\"greater than\"",
			pos:         position{line: 518, col: 1, offset: 23673},
			expr: &litMatcher{
				pos:        position{line: 518, col: 51, offset: 23723},
				val:        ">",
				ignoreCase: false,
			},
		},
		{
			name:        "AMPER",
			displayName: "\"ampersand\"",
			pos:         position{line: 520, col: 1, offset: 23728},
			expr: &litMatcher{
				pos:        position{line: 520, col: 51, offset: 23778},
				val:        "&",
				ignoreCase: false,
			},
		},
		{
			name:        "BANG",
			displayName: "\"bang\"",
			pos:         position{line: 521, col: 1, offset: 23782},
			expr: &litMatcher{
				pos:        position{line: 521, col: 51, offset: 23832},
				val:        "!",
				ignoreCase: false,
			},
		},
		{
			name:        "HAT",
			displayName: "\"hat\"",
			pos:         position{line: 523, col: 1, offset: 23893},
			expr: &litMatcher{
				pos:        position{line: 523, col: 51, offset: 23943},
				val:        "^",
				ignoreCase: false,
			},
		},
		{
			name:        "PERCENT",
			displayName: "\"percent\"",
			pos:         position{line: 524, col: 1, offset: 23947},
			expr: &litMatcher{
				pos:        position{line: 524, col: 51, offset: 23997},
				val:        "%",
				ignoreCase: false,
			},
		},
		{
			name:        "BAR",
			displayName: "\"bar\"",
			pos:         position{line: 525, col: 1, offset: 24001},
			expr: &litMatcher{
				pos:        position{line: 525, col: 51, offset: 24051},
				val:        "|",
				ignoreCase: false,
			},
		},
		{
			name:        "UBAR",
			displayName: "\"underbar\"",
			pos:         position{line: 526, col: 1, offset: 24055},
			expr: &litMatcher{
				pos:        position{line: 526, col: 51, offset: 24105},
				val:        "_",
				ignoreCase: false,
			},
		},
		{
			name:        "DQUO",
			displayName: "\"double quote\"",
			pos:         position{line: 528, col: 1, offset: 24110},
			expr: &charClassMatcher{
				pos:        position{line: 528, col: 51, offset: 24160},
				val:        "[U+0022]",
				chars:      []rune{'U', '+', '0', '0', '2', '2'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "SQUO",
			displayName: "\"single quote\"",
			pos:         position{line: 529, col: 1, offset: 24181},
			expr: &charClassMatcher{
				pos:        position{line: 529, col: 51, offset: 24231},
				val:        "[U+0027]",
				chars:      []rune{'U', '+', '0', '0', '2', '7'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "BQUO",
			displayName: "\"back quote/grave accent\"",
			pos:         position{line: 530, col: 1, offset: 24252},
			expr: &charClassMatcher{
				pos:        position{line: 530, col: 51, offset: 24302},
				val:        "[U+0060]",
				chars:      []rune{'U', '+', '0', '0', '6', '0'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "LF",
			displayName: "\"line feed\"",
			pos:         position{line: 532, col: 1, offset: 24324},
			expr: &charClassMatcher{
				pos:        position{line: 532, col: 51, offset: 24374},
				val:        "[U+000A]",
				chars:      []rune{'U', '+', '0', '0', '0', 'A'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "NOT",
			displayName: "\"not\"",
			pos:         position{line: 543, col: 1, offset: 24788},
			expr: &ruleRefExpr{
				pos:  position{line: 543, col: 51, offset: 24838},
				name: "BANG",
			},
		},
		{
			name:        "ADD",
			displayName: "\"add\"",
			pos:         position{line: 545, col: 1, offset: 24862},
			expr: &ruleRefExpr{
				pos:  position{line: 545, col: 51, offset: 24912},
				name: "PLUS",
			},
		},
		{
			name:        "SUB",
			displayName: "\"subtract\"",
			pos:         position{line: 546, col: 1, offset: 24935},
			expr: &ruleRefExpr{
				pos:  position{line: 546, col: 51, offset: 24985},
				name: "MINUS",
			},
		},
		{
			name:        "MUL",
			displayName: "\"multiply\"",
			pos:         position{line: 547, col: 1, offset: 25008},
			expr: &ruleRefExpr{
				pos:  position{line: 547, col: 51, offset: 25058},
				name: "ASTERISK",
			},
		},
		{
			name:        "QUO",
			displayName: "\"quotient\"",
			pos:         position{line: 548, col: 1, offset: 25081},
			expr: &ruleRefExpr{
				pos:  position{line: 548, col: 51, offset: 25131},
				name: "SLASH",
			},
		},
		{
			name:        "REM",
			displayName: "\"remainder\"",
			pos:         position{line: 549, col: 1, offset: 25154},
			expr: &ruleRefExpr{
				pos:  position{line: 549, col: 51, offset: 25204},
				name: "PERCENT",
			},
		},
		{
			name:        "AND",
			displayName: "\"bit: AND\"",
			pos:         position{line: 551, col: 1, offset: 25227},
			expr: &ruleRefExpr{
				pos:  position{line: 551, col: 51, offset: 25277},
				name: "AMPER",
			},
		},
		{
			name:        "OR",
			displayName: "\"bit: OR\"",
			pos:         position{line: 552, col: 1, offset: 25300},
			expr: &ruleRefExpr{
				pos:  position{line: 552, col: 51, offset: 25350},
				name: "BAR",
			},
		},
		{
			name:        "XOR",
			displayName: "\"bit: XOR\"",
			pos:         position{line: 553, col: 1, offset: 25373},
			expr: &ruleRefExpr{
				pos:  position{line: 553, col: 51, offset: 25423},
				name: "HAT",
			},
		},
		{
			name:        "AND_NOT",
			displayName: "\"bit: AND NOT\"",
			pos:         position{line: 554, col: 1, offset: 25446},
			expr: &seqExpr{
				pos: position{line: 554, col: 51, offset: 25496},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 554, col: 51, offset: 25496},
						name: "AMPER",
					},
					&ruleRefExpr{
						pos:  position{line: 554, col: 57, offset: 25502},
						name: "HAT",
					},
				},
			},
		},
		{
			name:        "NEG",
			displayName: "\"unary bit negation\"",
			pos:         position{line: 556, col: 1, offset: 25521},
			expr: &ruleRefExpr{
				pos:  position{line: 556, col: 51, offset: 25571},
				name: "HAT",
			},
		},
		{
			name:        "SHL",
			displayName: "\"bit: shift left\"",
			pos:         position{line: 558, col: 1, offset: 25595},
			expr: &seqExpr{
				pos: position{line: 558, col: 51, offset: 25645},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 558, col: 51, offset: 25645},
						name: "LSS",
					},
					&ruleRefExpr{
						pos:  position{line: 558, col: 55, offset: 25649},
						name: "LSS",
					},
				},
			},
		},
		{
			name:        "SHR",
			displayName: "\"bit: shift right\"",
			pos:         position{line: 559, col: 1, offset: 25669},
			expr: &seqExpr{
				pos: position{line: 559, col: 51, offset: 25719},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 559, col: 51, offset: 25719},
						name: "GTR",
					},
					&ruleRefExpr{
						pos:  position{line: 559, col: 55, offset: 25723},
						name: "GTR",
					},
				},
			},
		},
		{
			name:        "LAND",
			displayName: "\"logical AND\"",
			pos:         position{line: 561, col: 1, offset: 25744},
			expr: &seqExpr{
				pos: position{line: 561, col: 51, offset: 25794},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 561, col: 51, offset: 25794},
						name: "AMPER",
					},
					&ruleRefExpr{
						pos:  position{line: 561, col: 57, offset: 25800},
						name: "AMPER",
					},
				},
			},
		},
		{
			name:        "LOR",
			displayName: "\"logical OR\"",
			pos:         position{line: 562, col: 1, offset: 25818},
			expr: &seqExpr{
				pos: position{line: 562, col: 51, offset: 25868},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 562, col: 51, offset: 25868},
						name: "BAR",
					},
					&ruleRefExpr{
						pos:  position{line: 562, col: 55, offset: 25872},
						name: "BAR",
					},
				},
			},
		},
		{
			name:        "ARROW",
			displayName: "\"arrow\"",
			pos:         position{line: 563, col: 1, offset: 25892},
			expr: &seqExpr{
				pos: position{line: 563, col: 51, offset: 25942},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 563, col: 51, offset: 25942},
						name: "LSS",
					},
					&ruleRefExpr{
						pos:  position{line: 563, col: 55, offset: 25946},
						name: "MINUS",
					},
				},
			},
		},
		{
			name:        "INC",
			displayName: "\"increment\"",
			pos:         position{line: 564, col: 1, offset: 25966},
			expr: &seqExpr{
				pos: position{line: 564, col: 51, offset: 26016},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 564, col: 51, offset: 26016},
						name: "PLUS",
					},
					&ruleRefExpr{
						pos:  position{line: 564, col: 56, offset: 26021},
						name: "PLUS",
					},
				},
			},
		},
		{
			name:        "DEC",
			displayName: "\"decrement\"",
			pos:         position{line: 565, col: 1, offset: 26040},
			expr: &seqExpr{
				pos: position{line: 565, col: 51, offset: 26090},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 565, col: 51, offset: 26090},
						name: "MINUS",
					},
					&ruleRefExpr{
						pos:  position{line: 565, col: 57, offset: 26096},
						name: "MINUS",
					},
				},
			},
		},
		{
			name:        "EQL",
			displayName: "\"equal\"",
			pos:         position{line: 567, col: 1, offset: 26115},
			expr: &seqExpr{
				pos: position{line: 567, col: 51, offset: 26165},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 567, col: 51, offset: 26165},
						name: "EQUAL",
					},
					&ruleRefExpr{
						pos:  position{line: 567, col: 57, offset: 26171},
						name: "EQUAL",
					},
				},
			},
		},
		{
			name:        "NEQ",
			displayName: "\"not equal\"",
			pos:         position{line: 568, col: 1, offset: 26189},
			expr: &seqExpr{
				pos: position{line: 568, col: 51, offset: 26239},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 568, col: 51, offset: 26239},
						name: "BANG",
					},
					&ruleRefExpr{
						pos:  position{line: 568, col: 56, offset: 26244},
						name: "EQUAL",
					},
				},
			},
		},
		{
			name:        "LEQ",
			displayName: "\"less or equal\"",
			pos:         position{line: 569, col: 1, offset: 26263},
			expr: &seqExpr{
				pos: position{line: 569, col: 51, offset: 26313},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 569, col: 51, offset: 26313},
						name: "LSS",
					},
					&ruleRefExpr{
						pos:  position{line: 569, col: 55, offset: 26317},
						name: "EQUAL",
					},
				},
			},
		},
		{
			name:        "GEQ",
			displayName: "\"greater or equal\"",
			pos:         position{line: 570, col: 1, offset: 26337},
			expr: &seqExpr{
				pos: position{line: 570, col: 51, offset: 26387},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 570, col: 51, offset: 26387},
						name: "GTR",
					},
					&ruleRefExpr{
						pos:  position{line: 570, col: 55, offset: 26391},
						name: "EQUAL",
					},
				},
			},
		},
		{
			name:        "DEFINE",
			displayName: "\"define\"",
			pos:         position{line: 571, col: 1, offset: 26411},
			expr: &seqExpr{
				pos: position{line: 571, col: 51, offset: 26461},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 571, col: 51, offset: 26461},
						name: "COLON",
					},
					&ruleRefExpr{
						pos:  position{line: 571, col: 57, offset: 26467},
						name: "EQUAL",
					},
				},
			},
		},
		{
			name:        "ELLIPSIS",
			displayName: "\"ellipsis\"",
			pos:         position{line: 572, col: 1, offset: 26485},
			expr: &seqExpr{
				pos: position{line: 572, col: 51, offset: 26535},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 572, col: 51, offset: 26535},
						name: "DOT",
					},
					&ruleRefExpr{
						pos:  position{line: 572, col: 55, offset: 26539},
						name: "DOT",
					},
					&ruleRefExpr{
						pos:  position{line: 572, col: 59, offset: 26543},
						name: "DOT",
					},
				},
			},
		},
		{
			name:        "ASSIGN",
			displayName: "\"assign\"",
			pos:         position{line: 574, col: 1, offset: 26561},
			expr: &ruleRefExpr{
				pos:  position{line: 574, col: 51, offset: 26611},
				name: "EQUAL",
			},
		},
		{
			name:        "ADD_ASSIGN",
			displayName: "\"assign: add\"",
			pos:         position{line: 575, col: 1, offset: 26634},
			expr: &seqExpr{
				pos: position{line: 575, col: 51, offset: 26684},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 575, col: 51, offset: 26684},
						name: "PLUS",
					},
					&ruleRefExpr{
						pos:  position{line: 575, col: 56, offset: 26689},
						name: "EQUAL",
					},
				},
			},
		},
		{
			name:        "SUB_ASSIGN",
			displayName: "\"assign: subtract\"",
			pos:         position{line: 576, col: 1, offset: 26708},
			expr: &seqExpr{
				pos: position{line: 576, col: 51, offset: 26758},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 576, col: 51, offset: 26758},
						name: "MINUS",
					},
					&ruleRefExpr{
						pos:  position{line: 576, col: 57, offset: 26764},
						name: "EQUAL",
					},
				},
			},
		},
		{
			name:        "MUL_ASSIGN",
			displayName: "\"assign: multiply\"",
			pos:         position{line: 577, col: 1, offset: 26782},
			expr: &seqExpr{
				pos: position{line: 577, col: 51, offset: 26832},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 577, col: 51, offset: 26832},
						name: "ASTERISK",
					},
					&ruleRefExpr{
						pos:  position{line: 577, col: 60, offset: 26841},
						name: "EQUAL",
					},
				},
			},
		},
		{
			name:        "QUO_ASSIGN",
			displayName: "\"assign: quotient\"",
			pos:         position{line: 578, col: 1, offset: 26856},
			expr: &seqExpr{
				pos: position{line: 578, col: 51, offset: 26906},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 578, col: 51, offset: 26906},
						name: "SLASH",
					},
					&ruleRefExpr{
						pos:  position{line: 578, col: 57, offset: 26912},
						name: "EQUAL",
					},
				},
			},
		},
		{
			name:        "REM_ASSIGN",
			displayName: "\"assign: remainder\"",
			pos:         position{line: 579, col: 1, offset: 26930},
			expr: &seqExpr{
				pos: position{line: 579, col: 51, offset: 26980},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 579, col: 51, offset: 26980},
						name: "PERCENT",
					},
					&ruleRefExpr{
						pos:  position{line: 579, col: 59, offset: 26988},
						name: "EQUAL",
					},
				},
			},
		},
		{
			name:        "AND_ASSIGN",
			displayName: "\"assign: logical AND\"",
			pos:         position{line: 581, col: 1, offset: 27005},
			expr: &seqExpr{
				pos: position{line: 581, col: 51, offset: 27055},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 581, col: 51, offset: 27055},
						name: "AMPER",
					},
					&ruleRefExpr{
						pos:  position{line: 581, col: 57, offset: 27061},
						name: "EQUAL",
					},
				},
			},
		},
		{
			name:        "OR_ASSIGN",
			displayName: "\"assign: logical OR\"",
			pos:         position{line: 582, col: 1, offset: 27079},
			expr: &seqExpr{
				pos: position{line: 582, col: 51, offset: 27129},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 582, col: 51, offset: 27129},
						name: "BAR",
					},
					&ruleRefExpr{
						pos:  position{line: 582, col: 55, offset: 27133},
						name: "EQUAL",
					},
				},
			},
		},
		{
			name:        "XOR_ASSIGN",
			displayName: "\"assign: logical XOR\"",
			pos:         position{line: 583, col: 1, offset: 27153},
			expr: &seqExpr{
				pos: position{line: 583, col: 51, offset: 27203},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 583, col: 51, offset: 27203},
						name: "HAT",
					},
					&ruleRefExpr{
						pos:  position{line: 583, col: 55, offset: 27207},
						name: "EQUAL",
					},
				},
			},
		},
		{
			name:        "AND_NOT_ASSIGN",
			displayName: "\"assign: logical AND NOT\"",
			pos:         position{line: 584, col: 1, offset: 27227},
			expr: &seqExpr{
				pos: position{line: 584, col: 51, offset: 27277},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 584, col: 51, offset: 27277},
						name: "AMPER",
					},
					&ruleRefExpr{
						pos:  position{line: 584, col: 57, offset: 27283},
						name: "HAT",
					},
					&ruleRefExpr{
						pos:  position{line: 584, col: 61, offset: 27287},
						name: "EQUAL",
					},
				},
			},
		},
		{
			name:        "SHL_ASSIGN",
			displayName: "\"assign: shift left\"",
			pos:         position{line: 586, col: 1, offset: 27303},
			expr: &seqExpr{
				pos: position{line: 586, col: 51, offset: 27353},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 586, col: 51, offset: 27353},
						name: "LSS",
					},
					&ruleRefExpr{
						pos:  position{line: 586, col: 55, offset: 27357},
						name: "LSS",
					},
					&ruleRefExpr{
						pos:  position{line: 586, col: 59, offset: 27361},
						name: "EQUAL",
					},
				},
			},
		},
		{
			name:        "SHR_ASSIGN",
			displayName: "\"assign: shift right\"",
			pos:         position{line: 587, col: 1, offset: 27378},
			expr: &seqExpr{
				pos: position{line: 587, col: 51, offset: 27428},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 587, col: 51, offset: 27428},
						name: "GTR",
					},
					&ruleRefExpr{
						pos:  position{line: 587, col: 55, offset: 27432},
						name: "GTR",
					},
					&ruleRefExpr{
						pos:  position{line: 587, col: 59, offset: 27436},
						name: "EQUAL",
					},
				},
			},
		},
		{
			name:        "ADDR",
			displayName: "\"address\"",
			pos:         position{line: 589, col: 1, offset: 27454},
			expr: &ruleRefExpr{
				pos:  position{line: 589, col: 51, offset: 27504},
				name: "AMPER",
			},
		},
		{
			name:        "REFR",
			displayName: "\"resolve reference\"",
			pos:         position{line: 590, col: 1, offset: 27527},
			expr: &ruleRefExpr{
				pos:  position{line: 590, col: 51, offset: 27577},
				name: "ASTERISK",
			},
		},
		{
			name:        "Keyword",
			displayName: "\"keyword\"",
			pos:         position{line: 595, col: 1, offset: 27706},
			expr: &choiceExpr{
				pos: position{line: 595, col: 51, offset: 27756},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 595, col: 51, offset: 27756},
						val:        "break",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 596, col: 51, offset: 27814},
						val:        "case",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 597, col: 51, offset: 27871},
						val:        "chan",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 598, col: 51, offset: 27928},
						val:        "const",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 599, col: 51, offset: 27986},
						val:        "continue",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 601, col: 51, offset: 28048},
						val:        "default",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 602, col: 51, offset: 28108},
						val:        "defer",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 603, col: 51, offset: 28166},
						val:        "else",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 604, col: 51, offset: 28223},
						val:        "fallthrough",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 605, col: 51, offset: 28287},
						val:        "for",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 607, col: 51, offset: 28344},
						val:        "func",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 608, col: 51, offset: 28401},
						val:        "go",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 609, col: 51, offset: 28456},
						val:        "goto",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 610, col: 51, offset: 28513},
						val:        "if",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 611, col: 51, offset: 28568},
						val:        "import",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 613, col: 51, offset: 28628},
						val:        "interface",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 614, col: 51, offset: 28690},
						val:        "map",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 615, col: 51, offset: 28746},
						val:        "package",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 616, col: 51, offset: 28806},
						val:        "range",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 617, col: 51, offset: 28864},
						val:        "return",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 619, col: 51, offset: 28924},
						val:        "select",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 620, col: 51, offset: 28983},
						val:        "struct",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 621, col: 51, offset: 29042},
						val:        "switch",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 622, col: 51, offset: 29101},
						val:        "type",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 623, col: 51, offset: 29158},
						val:        "var",
						ignoreCase: false,
					},
				},
			},
		},
	},
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

var statePool = &sync.Pool{
	New: func() interface{} { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := string(strconv.AppendQuote([]byte{}, lit.val)) + ignoreCase // wrap 'lit.val' with double quotes
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
